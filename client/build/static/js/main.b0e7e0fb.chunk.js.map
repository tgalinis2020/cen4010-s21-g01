{"version":3,"sources":["utils/apiRequest.js","context/SessionContext.js","utils/convertDateTime.js","utils/formatDate.js","utils/getPosts.js","utils/debouce.js","pages/dashboard/ExplorePage.jsx","pages/dashboard/SubscriptionsPage.jsx","pages/dashboard/FavoritesPage.jsx","components/BackButton.jsx","utils/uploadImage.js","hooks/useValidators.js","pages/settings/AccountPage.jsx","utils/getPets.js","pages/settings/PetsPage.jsx","pages/SettingsPage.jsx","utils/convertToJsonOrThrowError.js","Models/Base.js","Models/User.js","pages/SignInPage.jsx","pages/SignUpPage.jsx","components/CommentForm.jsx","components/Comment.jsx","utils/getComments.js","utils/getPost.js","pages/PostPage.jsx","Models/Tag.js","Models/Post.js","pages/CreatePostPage.jsx","utils/getSession.js","Main.jsx","index.jsx"],"names":["apiRequest","method","target","data","url","init","headers","includes","JSON","stringify","fetch","SessionContext","createContext","convertDateTime","datetime","split","datePart","timePart","year","month","date","hours","minutes","seconds","Date","UTC","DAYS","MONTHS","formatDate","fromDB","getDay","getMonth","getDate","getFullYear","getPosts","maxPosts","additionalParams","params","push","join","then","res","json","included","items","id","attributes","relationships","related","author","tags","map","image","title","text","createdAt","find","type","username","filter","debounce","time","callback","override","undefined","active","timeout","args","handler","apply","window","clearTimeout","this","setTimeout","ExplorePage","useContext","session","useState","posts","setPosts","searchMode","setSearchMode","history","useHistory","handleSearch","value","tagFilter","key","useEffect","Form","Group","Control","placeholder","onChange","ButtonGroup","className","Button","onClick","icon","faPlus","Row","i","Col","xs","sm","md","Card","to","Img","src","Body","Title","Text","length","variant","SubscriptionsPage","subsFilter","user","FavoritesPage","BackButton","style","cursor","faArrowCircleLeft","size","replace","uploadImage","file","body","FormData","append","name","useValidators","validators","initialState","Object","keys","dirty","error","fields","setFields","get","field","validate","reduce","a","fn","e","Promise","resolve","prev","catch","set","isInvalid","getError","getValidity","all","allValid","valid","AccountPage","setSession","avatar","setAvatar","checkEmpty","password","newPassword","noValidate","as","Label","column","Feedback","span","offset","updatePassword","alert","status","File","custom","label","files","item","setAttribute","update","s","getPets","userId","PetsPage","pets","setPets","avatarRef","useRef","petNameRef","petName","createPet","img","console","log","owner","current","ref","ListGroup","pet","Item","Media","faPaw","width","height","borderRadius","SettingsPage","useRouteMatch","path","page","setPage","goToPage","p","charAt","toUpperCase","substr","exact","convertToJsonOrThrowError","Base","obj","dirtyAttributes","attr","val","payload","relationship","objs","updateRelationship","toResourceIdentifier","User","hydrate","new","getAttribute","updateToManyRelationship","post","SignInPage","setUsername","setPassword","debounced","setter","uid","subscriptions","SignUpPage","checkExists","pop","firstName","lastName","email","create","promise","CommentForm","onSubmitted","setText","inputRef","Comment","border","alt","faUserCircle","getComments","getPost","postId","PostPage","setPost","comments","setComments","useParams","petResource","subToPet","petId","sess","concat","comment","faSpinner","pulse","Tag","Post","tagmap","tag","hydratedTags","resource","newTags","r","c","CreatePostPage","n","setFile","loading","setLoading","maxChars","test","isChecked","Check","defaultChecked","index","plaintext","readOnly","defaultValue","tagList","t","trim","toLowerCase","petList","createPost","getSession","Anonymous","Nav","NavDropdown","faSignInAlt","faUser","Authenticated","ItemText","Divider","Link","faCog","faSignOutAlt","DashboardNav","location","pathname","pages","Dashboard","Main","sessionState","Provider","Navbar","bg","expand","Container","Brand","faBone","Toggle","aria-controls","Collapse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0e7e0fb.chunk.js","sourcesContent":["function apiRequest(method, target, data = null) {\n    const url = `https://lamp.cse.fau.edu/~cen4010_s21_g01/api-v1.php${target}`\n    const init = {\n        method,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept':       'application/json',\n        }\n    }\n\n    if (['POST', 'PUT', 'PATCH', 'DELETE'].includes(method)) {\n        init['body'] = JSON.stringify({ data })\n    }\n\n    return fetch(url, init)\n}\n\nexport default apiRequest\n","import { createContext } from 'react'\n\nconst SessionContext = createContext()\n\nexport default SessionContext","/**\n * In MySQL, the DATETIME data type returns dates using the \"YYYY-MM-DD HH:II:SS\"\n * format.\n * \n * Also worth noting that dates are stored relative to UTC.\n * \n * @param {string} datetimeString\n * @returns {Date} A Date object initialized using provided string.\n */\nfunction convertDateTime(datetime) {\n    const [datePart, timePart] = datetime.split(' ')\n    const [year, month, date] = datePart.split('-')\n    const [hours, minutes, seconds] = timePart.split(':')\n\n    // Note: months start at zero, so Jan = 0, Feb = 1, and so on.\n    return new Date(Date.UTC(year, month - 1, date, hours, minutes, seconds))\n}\n\nexport default convertDateTime\n","import convertDateTime from './convertDateTime'\n\nconst DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\nconst MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n                'Oct', 'Nov', 'Dec']\n\nfunction formatDate(fromDB) {\n    const date = convertDateTime(fromDB)\n\n    return `${DAYS[date.getDay()]}, ${MONTHS[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`\n}\n\nexport default formatDate","import apiRequest from './apiRequest'\nimport formatDate from './formatDate'\n\n/**\n * Since both the explore and subscriptions pages hit the same endpoint but\n * with different parameters, it was worth abstracting shared logic into its\n * own utility function.\n * \n * @param {string[]} additionalParams \n * @returns Promise containing returned posts with their authors and tags.\n */\nfunction getPosts(maxPosts, additionalParams = []) {\n    const params = [\n        'include=author,tags',\n        'fields[users]=username',\n        'sort=-createdAt',\n        ...additionalParams,\n    ]\n\n    if (maxPosts !== null) {\n        params.push(`page[size]=${maxPosts}`)\n    }\n\n    return apiRequest('GET', `/posts?${params.join('&')}`)\n        .then((res) => res.json())\n        .then(({ data, included }) => {\n            const items = []\n\n            for (const { id, attributes, relationships } of data) {\n                \n                // TODO:    Pets and likes should be here as well but they are\n                //          not represented in the front-end yet.\n                // Note that some relationships might not be available, such as\n                // tags.\n                const related = {\n                    author: relationships.author.data.id,\n                    tags: 'tags' in relationships ? relationships.tags.data.map(({ id }) => id) : [],\n                }\n\n                items.push({\n                    id,\n                    image: attributes.image,\n                    title: attributes.title,\n                    text: attributes.text,\n                    createdAt: formatDate(attributes.createdAt),\n\n                    // Posts MUST have an author so it should be safe to assume\n                    // that the find method returns a resource object of\n                    // type \"users\".\n                    author: included\n                        .find(({ type, id }) => type === 'users' && id === related.author)\n                        .attributes\n                        .username,\n\n                    tags: included\n                        .filter(({ type, id }) => type === 'tags' && related.tags.includes(id))\n                        .map(({ attributes }) => attributes.text),\n                })\n            }\n\n            return items\n        })\n}\n\nexport default getPosts","// A decorator function that runs the callback only when a certain\n// amount of time has passed since the last time the function was invoked.\n//\n// Inspired by the following implementation by David Walsh:\n// https://davidwalsh.name/javascript-debounce-function\nfunction debounce(time, callback, override = undefined) {\n    let active = false\n    let timeout = null\n\n    return function (...args) {\n        // Run the following after the timeout is complete.\n        //\n        // A nice quirk of arrow functions is that they have no \"this\",\n        // so one can reference the parent context without setting it to\n        // another variable. Before arrow functions were introduced,\n        // it was common to do \"var self = this\" to reference the parent\n        // function's context.\n        const handler = () => {\n            callback.apply(this, args)\n            active = false\n        }\n\n        active && window.clearTimeout(timeout)\n\n        // If override condition is set, ignore debouncing behavior.\n        if (typeof override === 'function' && override.apply(this, args)) {\n            handler()\n        } else {\n            timeout = window.setTimeout(handler, time)\n            active = true\n        }\n    }\n}\n\nexport default debounce\n","import { useEffect, useState, useContext } from 'react'\n\nimport { Link, useHistory } from 'react-router-dom'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\n\nimport SessionContext from '../../context/SessionContext'\nimport getPosts from '../../utils/getPosts'\nimport debounce from '../../utils/debouce'\n\nfunction ExplorePage() {\n    const [session, setSession] = useContext(SessionContext)\n    const [posts, setPosts] = useState([])\n    const [searchMode, setSearchMode] = useState(false)\n    const history = useHistory()\n\n    const goToCreatePost = () => history.push('/post')\n\n    const handleSearch = debounce(\n        1000, // Wait for one second before doing anything.\n\n        ({ target }) => {\n\n            if (target.value === '') {\n\n                if (searchMode) {    \n\n                    setSearchMode(false)\n\n                    getPosts(null).then(setPosts)\n\n                }\n\n            } else {\n\n                const tagFilter = `filter[tags.text][in]=${target.value.split(' ').join(',')}`\n\n                setSearchMode(true)\n\n                getPosts(null, [tagFilter]).then(setPosts)\n\n            }\n\n        },\n\n        ({ key, target }) => key === 'Enter' || (key === 'Backspace' && target.value === '')\n    )\n    \n    useEffect(() => {\n        getPosts(session === null ? 10 : null)\n            .then(setPosts)\n    }, [])\n\n    return (\n        <>\n            {session && (\n                <Form>\n                    <Form.Group>\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"Search for posts by tag...\"\n                            onChange={handleSearch} />\n                    </Form.Group>\n\n                    <ButtonGroup className=\"my-2\">\n                        <Button className=\"ml-auto\" onClick={goToCreatePost}>\n                            <FontAwesomeIcon className=\"mr-2\" icon={faPlus} />\n                            Create Post\n                        </Button>\n                    </ButtonGroup>\n                </Form>\n            )}\n\n            <Row>\n                {posts.map(({ id, image, title, author, text, createdAt, tags }, i) => (\n                    <Col key={i} xs={12} sm={6} md={4}>\n                        <Card className=\"my-4\">\n                            <Link to={`/post/${id}`}>\n                                <Card.Img src={image} />\n                            </Link>\n\n                            <Card.Body>\n                                <Card.Title>{title}</Card.Title>\n\n                                <Card.Text>\n                                    <small className=\"text-muted\">Posted by {author} on {createdAt}</small>\n                                    \n                                    <p>{text}</p>\n                                    \n                                    {tags.length > 0 && (\n                                        <p className=\"text-muted\">Tags: {tags.join(', ')}</p>\n                                    )}\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                ))}\n            </Row>\n\n            {posts.length === 0 && (\n                <p>There are currently no posts.</p>\n            )}\n\n            {session === null && (\n                <div className=\"my-4 text-center\">\n                    <p>You must be logged in to see more posts. <Button variant=\"primary\" onClick={() => history.push('/signin')}>Sign in</Button></p>\n                    <p>Don't have an account? <Button variant=\"primary\" onClick={() => history.push('/signup')}>Sign up</Button></p>\n                </div>\n            )}\n        </>\n    )\n}\n\nexport default ExplorePage","import { useEffect, useState, useContext } from 'react'\n\nimport { Link } from 'react-router-dom'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Card from 'react-bootstrap/Card'\n\nimport SessionContext from '../../context/SessionContext'\nimport getPosts from '../../utils/getPosts'\nimport debounce from '../../utils/debouce'\n\n// TODO:    Most of this is pretty much copy-paste from the Explore page.\n//          Could put shared logic in its own self-contained component.\nfunction SubscriptionsPage() {\n    const [session] = useContext(SessionContext)\n    const [posts, setPosts] = useState([])\n    const [searchMode, setSearchMode] = useState(false)\n    //const subsFilter = `filter[pets][in]=${session.subscriptions.join(',')}`\n    const subsFilter = `filter[pets.subscribers]=${session.user.id}`\n\n    const handleSearch = debounce(\n        1000, // Wait for one second before doing anything.\n\n        ({ target }) => {\n\n            if (target.value === '') {\n\n                if (searchMode) {    \n\n                    setSearchMode(false)\n\n                    getPosts(null, [subsFilter]).then(setPosts)\n\n                }\n\n            } else {\n\n                const tagFilter = `filter[tags.text][in]=${target.value.split(' ').join(',')}`\n\n                setSearchMode(true)\n\n                getPosts(null, [subsFilter, tagFilter]).then(setPosts)\n\n            }\n\n        },\n\n        ({ key, target }) => key === 'Enter' || (key === 'Backspace' && target.value === '')\n    )\n    \n    useEffect(() => {\n        getPosts(null, [subsFilter])\n            .then(setPosts)\n    }, [])\n\n    return (\n        <>\n            {session && (\n                <Form>\n                    <Form.Group>\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"Search for posts by tag...\"\n                            onChange={handleSearch} />\n                    </Form.Group>\n                </Form>\n            )}\n\n            <Row>\n                {posts.map(({ id, image, title, author, text, createdAt, tags }, i) => (\n                    <Col key={i} xs={12} sm={6} md={4}>\n                        <Card className=\"my-4\">\n                            <Link to={`/post/${id}`}>\n                                <Card.Img src={image} />\n                            </Link>\n\n                            <Card.Body>\n                                <Card.Title>{title}</Card.Title>\n\n                                <Card.Text>\n                                    <small className=\"text-muted\">Posted by {author} on {createdAt}</small>\n                                    \n                                    <p>{text}</p>\n                                    \n                                    {tags.length > 0 && (\n                                        <p className=\"text-muted\">Tags: {tags.join(', ')}</p>\n                                    )}\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                ))}\n            </Row>\n\n            {posts.length === 0 && (\n                <p>You have no subscriptions!</p>\n            )}\n        </>\n    )\n}\n\nexport default SubscriptionsPage","function FavoritesPage() {\n    return (\n        <h1>Favorites</h1>\n    )\n}\n\nexport default FavoritesPage","import { useHistory } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowCircleLeft } from '@fortawesome/free-solid-svg-icons'\n\nfunction BackButton() {\n    const history = useHistory()\n\n    return (\n        <FontAwesomeIcon\n            style={{ cursor: \"pointer\" }}\n            className=\"mr-3\"\n            icon={faArrowCircleLeft}\n            size=\"1x\"\n            onClick={() => history.replace('/dashboard')} />\n    )\n}\n\nexport default BackButton","function uploadImage(file) {\n    const url = `https://lamp.cse.fau.edu/~cen4010_s21_g01/api-v1.php/upload`\n    const body = new FormData()\n\n    body.append('data', file, file.name)\n\n    return fetch(url, { method: 'POST', body })\n}\n\nexport default uploadImage\n","import { useState } from 'react'\n\nimport debounce from '../utils/debouce'\n\n/**\n * A custom hook to ease the form validation process.\n * \n * Validators is an object where the key corresponds to a form field\n * and the value is an array of validation functions.\n * \n * Each validation function must return a promise that itself returns\n * a validation message. If the validation message is null, the field is\n * considered valid.\n * \n * Although it may be inconvenient, promises are used because some validation\n * strategies involve HTTP requests (e.g. checking if a username already exists).\n * For validation that is immediately resolved, return the error message using\n * Promise.resolve.\n */\n function useValidators(validators) {\n    const initialState = {}\n\n    for (const field of Object.keys(validators)) {\n        initialState[field] = { value: '', dirty: false, error: null }\n    }\n\n    const [fields, setFields] = useState(initialState)\n\n    const get = (field) => fields[field].value\n\n    const isInvalid = (field) => fields[field].dirty && fields[field].error !== null\n        \n    const getError = (field) => fields[field].error\n\n    const validate = (field, value) => validators[field]\n        .reduce((a, fn) => a.then((e) => e ?? fn(value, get)), Promise.resolve(null))\n        .then((error) => {\n            setFields((prev) => ({\n                ...prev,\n                [field]: { value, dirty: true, error }\n            }))\n\n            return error === null\n        })\n        .catch(() => {\n            setFields((prev) => ({\n                ...prev,\n                [field]: { value, dirty: true, error: 'Invalid value.' }\n            }))\n\n            return false\n        })\n\n    const set = (field) => debounce(\n        500,\n\n        // Go through each validation function and stop the promise chain\n        // when an error is not null.\n        //\n        // Note: a === accumilated promise\n        //       c === current promise\n        //       e === error message\n        ({ target }) => validate(field, target.value),\n\n        ({ key, target }) => key === 'Enter' || (key === 'Backspace' && target.value === '')\n    )\n        \n    // This eyesore goes through all of the validators for each field\n    // and returns the overall state of the set of fields.\n    const getValidity = () => Promise.all(\n            Object.keys(fields)\n                .map((field) => validate(field, fields[field].value)\n            )\n        )\n        .then((res) => res.reduce((allValid, valid) => allValid && valid, true))\n\n    return { get, set, isInvalid, getError, getValidity }\n}\n\nexport default useValidators","import { useContext, useState } from 'react'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nimport uploadImage from '../../utils/uploadImage'\nimport useValidators from '../../hooks/useValidators'\nimport SessionContext from '../../context/SessionContext'\n\nfunction AccountPage() {\n    const [session, setSession] = useContext(SessionContext)\n    const [avatar, setAvatar] = useState(null)\n\n    const checkEmpty = (field) => (value) => Promise\n        .resolve(value === '' ? `${field} cannot be empty.` : null)\n\n    const checkMatchesPassword = (value, get) => Promise\n        .resolve(value === get('password') ? 'Passwords should not match' : null)\n\n    const fields = useValidators({\n        password: [\n            checkEmpty('Password'),\n        ],\n\n        newPassword: [\n            checkEmpty('New password'),\n            checkMatchesPassword,\n        ],\n    })\n\n    const updatePassword = () => session.user\n        .updatePassword(fields.get('password'), fields.get('newPassword'))\n        .then((res) => {\n            window.alert(res.status === 204\n                ? 'Password updated!'\n                : 'An error occured while attempting to update your password.'\n            )\n        })\n\n    const updateAvatar = () => uploadImage(avatar)\n        .then((res) => res.json())\n        .then((res) => res.data)\n        .then((url) => session.user.setAttribute('avatar', url))\n        .then((user) => user.update())\n        .then((user) => setSession((s) => ({ ...s, user })))\n        .then(() => window.alert('Avatar updated!'))\n\n    return (\n        <>\n            <Form noValidate>\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Current Password</Form.Label>\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('password')}\n                            type=\"password\"\n                            placeholder=\"Current password\"\n                            onChange={fields.set('password')} />\n                        \n                        {fields.isInvalid('password') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('password')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>New Password</Form.Label>\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('newPassword')}\n                            type=\"password\"\n                            placeholder=\"New password\"\n                            onChange={fields.set('newPassword')} />\n                        \n                        {fields.isInvalid('newPassword') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('newPassword')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                        <Button variant=\"primary\" onClick={updatePassword}>Update Password</Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n\n            <hr />\n\n            <Form noValidate>\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Avatar</Form.Label>\n                    <Col sm={10}>\n                        <Form.File\n                            custom\n                            label={avatar ? avatar.name : 'Upload an image'}\n                            onChange={({ target }) => setAvatar(target.files.item(0))} />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                        <Button variant=\"primary\" onClick={updateAvatar}>Update Avatar</Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n        </>\n    )\n}\n\nexport default AccountPage","import apiRequest from \"./apiRequest\"\n\nfunction getPets(userId) {\n    return apiRequest('GET', `/users/${userId}/pets`)\n        .then((res) => res.json())\n        .then(({ data }) => data.map(({ id, attributes }) => ({\n            id,\n            name: attributes.name,\n            avatar: attributes.avatar,\n        })))\n}\n\nexport default getPets","import { useContext, useEffect, useRef, useState } from 'react'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Media from 'react-bootstrap/Media'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPaw } from '@fortawesome/free-solid-svg-icons'\n\nimport apiRequest from '../../utils/apiRequest'\nimport uploadImage from '../../utils/uploadImage'\nimport getPets from '../../utils/getPets'\nimport SessionContext from '../../context/SessionContext'\nimport useValidators from '../../hooks/useValidators'\n\nfunction PetsPage() {\n    const [session] = useContext(SessionContext)\n    const [avatar, setAvatar] = useState(null)\n    const [pets, setPets] = useState([])\n    const avatarRef = useRef(null)\n    const petNameRef = useRef(null)\n\n    const checkEmpty = (value) => Promise\n        .resolve(value === '' ? 'Pet nane cannot be empty.' : null)\n\n    const checkNotExists = (value) => Promise\n        .resolve(pets.includes(value) ? `You already have a pet named \"${value}.\"` : null)\n        \n    const fields = useValidators({\n        petName: [\n            checkEmpty,\n            checkNotExists,\n        ]\n    })\n\n    const createPetResource = (image) => ({\n        type: 'pets',\n\n        attributes: {\n            name: fields.get('petName'),\n            avatar: image,\n        },\n        \n        relationships: {\n            owner: {\n                data: { type: 'users', id: session.user.id }\n            }\n        }\n    })\n\n    const createPet = () => {\n        const promise = avatar === null ?\n            Promise.resolve(null) :\n            uploadImage(avatar)\n                .then((res) => res.json())\n                .then((res) => res.data)\n\n        return promise\n            .then((img) => {\n                console.log(img)\n                return apiRequest('POST', '/pets', createPetResource(img))\n            })\n            .then((res) => res.json())\n            .then((res) => res.data)\n            .then(({ id, attributes }) => {\n                setAvatar(null)\n                setPets((pets) => ([...pets, {\n                    id,\n                    name: attributes.name,\n                    avatar: attributes.avatar,\n                }]))\n\n                avatarRef.current.value = '' // Clear file from form control\n                petNameRef.current.value = ''\n            })\n    }\n\n    const handleAddPet = () => fields.getValidity()\n        .then((valid) => {\n            if (valid) {\n                return createPet()\n            }\n        })\n\n    useEffect(() => {\n       getPets(session.user.id).then(setPets)\n    }, [])\n\n    return (\n        <>\n            <Form noValidate>\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Pet Name</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            ref={petNameRef}\n                            isInvalid={fields.isInvalid('petName')}\n                            type=\"text\"\n                            placeholder=\"Enter you pet's name\"\n                            onChange={fields.set('petName')} />\n                        \n                        {fields.isInvalid('petName') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('petName')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Pet Avatar</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.File\n                            ref={avatarRef}\n                            custom\n                            label={avatar === null ? `Upload an image` : avatar.name}\n                            onChange={({ target }) => setAvatar(target.files.item(0))} />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                        <Button variant=\"primary\" onClick={handleAddPet}>Add Pet</Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n\n            <hr />\n\n            <h3>Pets</h3>\n\n            {pets.length > 0 ? (\n                <ListGroup>\n                    {pets.map((pet, i) => (\n                        <ListGroup.Item key={i}>\n                            <Media>\n                                {pet.avatar === null ? (\n                                    <FontAwesomeIcon icon={faPaw} size=\"4x\" className=\"d-block mr-3\" />\n                                ) : (\n                                    <img\n                                        style={{ width: '64px', height: '64px', borderRadius: '50%' }}\n                                        src={pet.avatar}\n                                        className=\"mr-3\"\n                                    />\n                                )}\n\n                                <Media.Body className=\"d-flex align-self-center\">\n                                    {pet.name}\n                                </Media.Body>\n                            </Media>\n                        </ListGroup.Item>\n                    ))}\n                </ListGroup>\n            ) : (\n                <p>You have no pets!</p>\n            )}\n        </>\n    )\n}\n\nexport default PetsPage","import { useContext, useState } from 'react'\nimport { Switch, Route, Redirect, useRouteMatch, useHistory } from 'react-router-dom'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Nav from 'react-bootstrap/Nav'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport BackButton from '../components/BackButton'\n\nimport AccountPage from './settings/AccountPage'\nimport PetsPage from './settings/PetsPage'\n\nfunction SettingsPage() {\n    const { url, path } = useRouteMatch()\n    const history = useHistory()\n    const pages = ['account', 'pets'/*, 'subscriptions'*/]\n    const [page, setPage] = useState('account')\n    const goToPage = p => () => {\n        setPage(p)\n        history.replace(`${url}/${p}`)\n    }\n\n    return (\n        <>\n            <h1><BackButton />Settings</h1>\n\n            <ButtonGroup className=\"d-flex my-4\">\n                {pages.map((p, i) => (\n                    <Button\n                        key={i}\n                        variant={p === page ? 'primary' : 'secondary'}\n                        onClick={goToPage(p)}>{`${p.charAt(0).toUpperCase()}${p.substr(1)}`}</Button>\n                ))}\n            </ButtonGroup>\n\n            <Switch>\n                <Route path={`${path}/account`}>\n                    <AccountPage />\n                </Route>\n\n                <Route path={`${path}/pets`}>\n                    <PetsPage />\n                </Route>\n\n                <Route path={`${path}/subscriptions`}>\n                    <p>Manage Subscriptions</p>\n                </Route>\n\n                <Route exact path={`${path}`}>\n                    <Redirect to={`${url}/account`} />\n                </Route>\n            </Switch>\n        </>\n    )\n}\n\nexport default SettingsPage","/**\n * If the response's status code does not match the one provided, the inner\n * function will throw an error.\n * \n * @param {number} status \n * @returns \n */\n function convertToJsonOrThrowError(status) {\n    return function (res) {\n        if (res.status !== status) {\n            throw res.status\n        }\n\n        return res.json()\n    }\n}\n\nexport default convertToJsonOrThrowError","import apiRequest from '../utils/apiRequest'\n\nexport default class Base\n{\n    constructor(obj = {}) {\n        this.id = obj.id || null\n        this.attributes = obj.attributes || {}\n        this.dirtyAttributes = []\n        this.relationships = obj.relationships || {}\n    }\n\n    // Child classes must override this method!\n    get type() {\n        return 'generic'\n    }\n\n    hydrate(obj) {\n        this.id = obj.id || null\n        this.attributes = obj.attributes || {}\n        this.relationships = obj.relationships || {}\n\n        return this\n    }\n\n    setAttribute(attr, val) {\n        this.dirtyAttributes.push(attr)\n        this.attributes[attr] = val\n\n        return this\n    }\n\n    getAttribute(attr) {\n        return this.attributes[attr]\n    }\n\n    toResourceIdentifier() {\n        return {\n            type: this.type,\n            id:   this.id,\n        }\n    }\n\n    toResource() {\n        return {\n            type:       this.type,\n            id:         this.id,\n            attributes: this.attributes,\n        }\n    }\n\n    create(relationships = null) {\n        const attributes = {}\n\n        for (const a of this.dirtyAttributes) {\n            attributes[a] = this.attributes[a]\n        }\n\n        const payload = { type: this.type, attributes }\n\n        if (relationships !== null) {\n            payload['relationships'] = relationships\n        }\n\n        return apiRequest('POST', `/${this.type}`, payload)\n            .then((res) => {\n                this.dirtyAttributes = []\n\n                return res.json()\n            })\n            .then((res) => res.data)\n    }\n\n    update() {\n        const attributes = {}\n\n        for (const a of this.dirtyAttributes) {\n            attributes[a] = this.attributes[a]\n        }\n\n        const payload = { type: this.type, id: this.id, attributes }\n\n        return apiRequest('PATCH', `/${this.type}/${this.id}`, payload)\n            .then(() => {\n                this.dirtyAttributes = []\n\n                return this\n            })\n    }\n\n    delete() {\n        return apiRequest('DELETE', `/${this.type}/${this.id}`);\n    }\n\n    updateRelationship(method, relationship, payload) {\n        return apiRequest(\n            method,\n            `/${this.type}/${this.id}/relationships/${relationship}`,\n            payload\n        )\n    }\n\n    updateToManyRelationship(method, relationship, objs) {\n        return this.updateRelationship(\n            method,\n            relationship,\n            objs.map(obj => obj.toResourceIdentifier())\n        )\n    }\n\n    updateToOneRelationship(method, relationship, obj) {\n        return this.updateRelationship(\n            method,\n            relationship,\n            obj.toResourceIdentifier()\n        )\n    }\n}","import Base from './Base'\nimport apiRequest from '../utils/apiRequest'\n\nexport default class User extends Base\n{\n    get type() {\n        return 'users'\n    }\n\n    /**\n     * Creating users is a two-step process: a resource must be created and\n     * their password must be set immediately afterward.\n     * \n     * @param {string}   password\n     */\n    create(password) {\n        const type = this.type\n        const attributes = {}\n\n        for (const attr of this.dirtyAttributes) {\n            attributes[attr] = this.attributes[attr]\n        }\n\n        return apiRequest('POST', `/${type}`, { type, attributes })\n            .then(res => res.json())\n            .then(({ data }) => {\n                this.hydrate(data)\n                return apiRequest('PUT', `/passwords/${data.id}`, password)\n            }).then(res => this)\n    }\n\n    updatePassword(current, password) {\n        return apiRequest('PATCH', `/passwords/${this.id}`, { current, new: password })\n    }\n\n    login(password) {\n        return apiRequest('POST', '/session', {\n            username: this.getAttribute('username'),\n            password\n        })\n    }\n\n    logout() {\n        return apiRequest('DELETE', '/session')\n    }\n\n    subscribeTo(pet) {\n        return this.updateToManyRelationship('POST', 'subscriptions', [pet])\n    }\n\n    unsubscribeFrom(pet) {\n        return this.updateToManyRelationship('DELETE', 'subscriptions', [pet])\n    }\n\n    addFavorite(post) {\n        return this.updateToManyRelationship('POST', 'favorites', [post])\n    }\n\n    removeFavorite(post) {\n        return this.updateToManyRelationship('DELETE', 'favorites', [post])\n    }\n\n    like(post) {\n        return this.updateToManyRelationship('POST', 'liked-posts', [post])\n    }\n\n    unlike(post) {\n        return this.updateToManyRelationship('DELETE', 'liked-posts', [post])\n    }\n}","import { useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\n\nimport BackButton from '../components/BackButton'\n\nimport apiRequest from '../utils/apiRequest'\nimport debounce from '../utils/debouce'\nimport convertToJsonOrThrowError from '../utils/convertToJsonOrThrowError'\nimport User from '../Models/User'\nimport SessionContext from '../context/SessionContext'\n\nfunction SignInPage() {\n    const [session, setSession] = useContext(SessionContext)\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const history = useHistory()\n\n    const login = () => apiRequest('POST', '/session', { username, password })\n        .then(convertToJsonOrThrowError(201))\n        .then((res) => res.data)\n        .then(({ uid }) => apiRequest('GET', `/users/${uid}?include=subscriptions`))\n        .then((res) => res.json())\n        .then(({ data, included }) => ({\n            user: new User(data),\n            subscriptions: included.map(({ id }) => id),\n        }))\n        .then(setSession)\n        .then(() => history.replace('/dashboard'))\n        .catch((error) => {\n            console.error(error)\n            // TODO: alerts don't look so nice, replace with something fancier\n            window.alert('Invalid username/password combination!')\n        })\n\n    const debounced = setter => debounce(\n        500,\n\n        ({ target }) => setter(target.value),\n\n        // Ignore debouncing when enter or backspace keys are pressed.\n        ({ key, target }) => key === 'Enter' || (key === 'Backspace' && target.value === '')\n    )\n\n    return (\n        <>\n            <h1 className=\"mb-4\"><BackButton />Sign In</h1>\n\n            <Form>\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Username</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"Enter username\"\n                            onChange={debounced(setUsername)} />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Password</Form.Label>\n                    <Col sm={10}>\n                        <Form.Control\n                            type=\"password\"\n                            placeholder=\"Enter password\"\n                            onChange={debounced(setPassword)} />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                        <Button variant=\"primary\" onClick={login}>Sign In</Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n        </>\n    )\n}\n\nexport default SignInPage","import { useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport User from '../Models/User'\n\nimport apiRequest from '../utils/apiRequest'\nimport uploadImage from '../utils/uploadImage'\nimport useValidators from '../hooks/useValidators'\n\nimport BackButton from '../components/BackButton'\nimport SessionContext from '../context/SessionContext'\n\nfunction SignUpPage() {\n    const [avatar, setAvatar] = useState(null)\n    const [session, setSession] = useContext(SessionContext)\n    const history = useHistory()\n    \n    const checkEmpty = (field = 'Value') => (value) => Promise\n        .resolve(value === '' ? `${field} cannot be empty.` : null)\n\n    const checkExists = (field, label = null) => (value) =>\n        apiRequest('GET', `/users?filter[${field}]=${value}`)\n            .then(res => res.json())\n            .then(\n                ({ data }) => typeof data.pop() === 'undefined'\n                    ? null \n                    : `Provided ${label || field} is already in use.`\n            )\n\n    const fields = useValidators({\n        username: [\n            checkEmpty('Username'),\n            checkExists('username'),\n        ],\n\n        password: [\n            checkEmpty('Password'),\n        ],\n\n        firstName: [\n            checkEmpty('First name'),\n        ],\n\n        lastName: [\n            checkEmpty('Last name'),\n        ],\n\n        email: [\n            checkEmpty('E-mail address'),\n            checkExists('email', 'e-mail address')\n        ],\n    })\n\n    const user = new User()\n\n    const handleSubmit = () => fields.getValidity()\n        .then((valid) => (valid && user\n            .setAttribute('firstName', fields.get('firstName'))\n            .setAttribute('lastName', fields.get('lastName'))\n            .setAttribute('email', fields.get('email'))\n            .setAttribute('username', fields.get('username'))\n            .create(fields.get('password'))\n            .then(() => {\n                const promise = apiRequest('POST', '/session', {\n                    username: fields.get('username'),\n                    password: fields.get('password'),\n                })\n\n                if (avatar !== null) {\n                    promise\n                        .then(() => uploadImage(avatar))\n                        .then((res) => res.json())\n                        .then(({ data }) => user.setAttribute('avatar', data))\n                        .then((user) => user.update())\n                }\n\n                return promise\n            })\n            .then(() => setSession({ user, subscriptions: [] }))\n            .then(() => history.replace('/dashboard'))\n            .catch(console.log)\n        ))\n\n    return (\n        <>\n            <h1 className=\"mb-4\"><BackButton />Sign Up</h1>\n\n            <Form noValidate>\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>First Name</Form.Label>\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('firstName')}\n                            type=\"text\"\n                            placeholder=\"Enter first name\"\n                            onChange={fields.set('firstName')} />\n\n                        {fields.isInvalid('firstName') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('firstName')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Last Name</Form.Label>\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('lastName')}\n                            type=\"text\"\n                            placeholder=\"Enter last name\"\n                            onChange={fields.set('lastName')} />\n\n                        {fields.isInvalid('lastName') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('lastName')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>E-mail Address</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('email')}\n                            type=\"text\"\n                            placeholder=\"Enter e-mail address\"\n                            onChange={fields.set('email')} />\n\n                        {fields.isInvalid('email') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('email')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Username</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('username')}\n                            type=\"text\"\n                            placeholder=\"Enter username\"\n                            onChange={fields.set('username')} />\n\n                        {fields.isInvalid('username') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('username')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Password</Form.Label>\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('password')}\n                            type=\"password\"\n                            placeholder=\"Enter password\"\n                            onChange={fields.set('password')} />\n                        \n                        {fields.isInvalid('password') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('password')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Avatar</Form.Label>\n                    <Col sm={10}>\n                        <Form.File\n                            custom\n                            label=\"Upload an image\"\n                            onChange={({ target }) => setAvatar(target.files.item(0))} />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                        <Button variant=\"primary\" onClick={handleSubmit}>Sign Up</Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n        </>\n    )\n}\n\nexport default SignUpPage","import { useState, useRef } from 'react'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport apiRequest from '../utils/apiRequest'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\n\nfunction CommentForm({ post, session, onSubmitted }) {\n    const [text, setText] = useState('')\n    const inputRef = useRef(null)\n    \n    const submit = () => apiRequest('POST', '/comments', {\n            type: 'comments',\n            attributes: { text },\n            relationships: {\n                author: {\n                    data: { type: 'users', id: session.user.id }\n                },\n\n                post: {\n                    data: { type: 'posts', id: post.id }\n                }\n            }\n        })\n        .then((res) => res.json())\n        .then((res) => res.data)\n        .then(onSubmitted)\n        .then(() => setText(''))\n        .then(() => {\n            inputRef.current.value = ''\n        })\n        .catch(console.log)\n\n    return (\n        <Form>\n            <Form.Group>\n                <Form.Control as=\"textarea\" ref={inputRef} onChange={({ target }) => setText(target.value)}></Form.Control>\n            </Form.Group>\n\n            <Form.Group>\n                <Button variant=\"primary\" onClick={submit}>\n                    <FontAwesomeIcon className=\"mr-2\" icon={faPlus} />\n                    Add Comment\n                </Button>\n            </Form.Group>\n        </Form>\n    )\n}\n\nexport default CommentForm","import Media from 'react-bootstrap/Media'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons'\n\nfunction Comment({ text, createdAt, author }) {\n    const commentStyles = {\n        width: '64px',\n        height: '64px',\n        borderRadius: '50%',\n        border: '1px solid #ccc' \n    }\n    \n    const image = author.avatar\n        ? <img style={commentStyles} className=\"mr-3\" src={author.avatar} alt={`${author.username}'s profile picture`} />\n        : <FontAwesomeIcon className=\"mr-3\" size=\"4x\" icon={faUserCircle} />\n\n    return (\n        <Media className=\"mb-4\">\n            {image}\n\n            <Media.Body>\n                <small className=\"text-muted\">Posted by {author.username} on {createdAt}</small>\n                <p>{text}</p>\n            </Media.Body>\n        </Media>\n    )\n}\n\nexport default Comment","import apiRequest from \"./apiRequest\"\nimport formatDate from \"./formatDate\"\n\nfunction getComments(id) {\n    const params = [\n        'include=author',\n        'fields[users]=username,avatar',\n        'sort=-createdAt',\n    ]\n\n    return apiRequest('GET', `/posts/${id}/comments?${params.join('&')}`)\n        .then((res) => res.json())\n        .then(({ data, included }) => data.map(({ id, attributes, relationships }) =>({\n            id,\n            text: attributes.text,\n            createdAt: formatDate(attributes.createdAt),\n            author: included\n                .find(({ id }) => id === relationships.author.data.id)\n                .attributes,\n        })))\n}\n\nexport default getComments\n","import apiRequest from \"./apiRequest\"\nimport formatDate from \"./formatDate\"\n\nfunction getPost(postId) {\n    const params = [\n        'include=author,tags,pets',\n        'fields[users]=username,avatar',\n        'fields[pets]=name,avatar',\n    ]\n\n    return apiRequest('GET', `/posts/${postId}?${params.join('&')}`)\n        .then((res) => res.json())\n        .then(({ data, included }) => {\n            const { id, attributes, relationships } = data\n            const { image, title, text, createdAt } = attributes\n            \n            const related = {\n                author: relationships.author.data.id,\n            }\n\n            // Pluck the IDs from to-many relationships, if applicable.\n            for (const key of ['tags', 'pets', 'likes']) {\n                related[key] = key in relationships\n                    ? relationships[key].data.map(({ id }) => id)\n                    : []\n            }\n\n            return {\n                id,\n                image,\n                title,\n                text,\n                createdAt: formatDate(createdAt),\n\n                author: included\n                    .find(({ type, id }) => type === 'users' && id === related.author)\n                    .attributes,\n\n                tags: included\n                    .filter(({ type, id }) => type === 'tags' && related.tags.includes(id))\n                    .map(({ attributes }) => attributes.text),\n\n                pets: included\n                    .filter(({ type, id }) => type === 'pets' && related.pets.includes(id))\n                    .map(({ id, attributes }) => ({ id, name: attributes.name, avatar: attributes.avatar })),\n            }\n        })\n}\n\nexport default getPost","import { useState, useEffect, useContext } from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport Card from 'react-bootstrap/Card'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Media from 'react-bootstrap/Media'\nimport Button from 'react-bootstrap/Button'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPaw, faUserCircle, faSpinner } from '@fortawesome/free-solid-svg-icons'\n\nimport CommentForm from '../components/CommentForm'\nimport BackButton from '../components/BackButton'\nimport Comment from '../components/Comment'\nimport SessionContext from '../context/SessionContext'\nimport getComments from '../utils/getComments'\nimport getPost from '../utils/getPost'\nimport apiRequest from '../utils/apiRequest'\n\nfunction PostPage() {\n    const [session, setSession] = useContext(SessionContext)\n    const [post, setPost] = useState(null)\n    const [comments, setComments] = useState([])\n    const { id } = useParams()\n\n    const avatarStyle = {\n        width: '64px',\n        height: '64px',\n        borderRadius: '50%',\n        border: '1px solid #ccc',\n    }\n\n    const petResource = (id) => [{ type: 'pets', id }]\n\n    const subToPet = (petId) => () => {\n        apiRequest('POST', `/users/${session.user.id}/relationships/subscriptions`, petResource(petId))\n            .then((res) => {\n                if (res.status !== 204) {\n                    console.error('Subscription was not created! Bug Tom about this! >:(')\n                }\n\n                setSession((sess) => ({\n                    ...sess,\n                    subscriptions: sess.subscriptions.concat([petId])\n                }))\n            })\n    }\n\n    const unsubFromPet = (petId) => () => {\n        apiRequest('DELETE', `/users/${session.user.id}/relationships/subscriptions`, petResource(petId))\n            .then((res) => {\n                if (res.status !== 204) {\n                    console.error('Subscription was not removed! Bug Tom about this! >:(')\n                }\n\n                setSession((sess) => ({\n                    ...sess,\n                    subscriptions: sess.subscriptions.filter((p) => p !== petId)\n                }))\n            })\n    }\n\n    useEffect(() => {\n        getPost(id)\n            .then(setPost)\n            .then(() => getComments(id))\n            .then(setComments)\n    }, [])\n\n    return (\n        <>\n            {post ? (\n                <>\n                    <h1><BackButton />{post.title}</h1>\n\n                    <Card className=\"my-4\">\n                        <Card.Img src={post.image} />\n\n                        <Card.Body>\n                            <Card.Text>\n                                <Media className=\"mb-4\">\n                                    {post.author.avatar ? (\n                                        <img style={avatarStyle} className=\"mr-3\" src={post.author.avatar} alt={`${post.author.username}'s profile picture`} />\n                                    ) : (\n                                        <FontAwesomeIcon className=\"mr-3\" size=\"4x\" icon={faUserCircle} />\n                                    )}\n\n                                    <Media.Body>\n                                        <small className=\"text-muted\">Posted by {post.author.username} on {post.createdAt}</small>\n                                        \n                                        <p>{post.text}</p>\n                                    </Media.Body>\n                                </Media>\n                                \n                                {post.pets.length > 0 && (\n                                    <div className=\"my-3\">\n                                        <p className=\"text-muted\">{post.author.username}'s pets in this post:</p>\n\n                                        <ListGroup>\n                                            {post.pets.map((pet, i) => (\n                                                <ListGroup.Item key={i}>\n                                                    <Media>\n                                                        {pet.avatar === null ? (\n                                                            <FontAwesomeIcon icon={faPaw} size=\"4x\" className=\"d-block mr-3\" />\n                                                        ) : (\n                                                            <img\n                                                                style={{ width: '64px', height: '64px', borderRadius: '50%' }}\n                                                                src={pet.avatar}\n                                                                className=\"mr-3\"\n                                                            />\n                                                        )}\n\n                                                        <Media.Body className=\"d-flex align-self-center\">\n                                                            {pet.name}\n\n                                                            {session.subscriptions.includes(pet.id) ? (\n                                                                <Button\n                                                                    className=\"ml-auto\"\n                                                                    variant=\"danger\"\n                                                                    onClick={unsubFromPet(pet.id)}\n                                                                >\n                                                                    Unsubscribe\n                                                                </Button>\n                                                            ) : (\n                                                                <Button\n                                                                    className=\"ml-auto\"\n                                                                    variant=\"success\"\n                                                                    onClick={subToPet(pet.id)}\n                                                                >\n                                                                    Subscribe\n                                                                </Button>\n                                                            )}\n                                                        </Media.Body>\n                                                    </Media>\n                                                </ListGroup.Item>\n                                            ))}\n                                        </ListGroup>\n                                    </div>\n                                )}\n\n                                {post.tags.length > 0 && (\n                                    <p className=\"text-muted\">Tags: {post.tags.join(', ')}</p>\n                                )}\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n\n                    \n                    {session && <CommentForm session={session} post={post} onSubmitted={getComments} />}\n\n                    <hr />\n\n                    <h3 className=\"mb-4\">Comments ({comments.length})</h3>\n\n                    {comments.length > 0 ? (\n                        comments.map((comment, i) => <Comment key={i} {...comment} />)\n                    ) : (\n                        <p>No comments available.</p>\n                    )}\n                </>\n            ) : (\n                <p className=\"text-center my-4\"><FontAwesomeIcon icon={faSpinner} size=\"3x\" pulse /></p>\n            )}\n        </>\n    )\n}\n\nexport default PostPage","import Base from './Base'\n\nexport default class Tag extends Base\n{\n    get type() {\n        return 'tags'\n    }\n}","import apiRequest from '../utils/apiRequest'\nimport Base from './Base'\nimport Tag from './Tag'\n\nexport default class Post extends Base\n{\n    get type() {\n        return 'posts'\n    }\n\n    // Posts should immediately be associated with an author upon creation.\n    // Note that provided tags may not exist in the backend so they might have\n    // to be created on-the-fly.\n    create(author = null, tags = [], pets = []) {\n        const tagmap = {}\n\n        // The value in the tag map determines whether or not a tag exists\n        // in the backend.\n        for (const tag of tags) {\n            tagmap[tag] = false\n        }\n\n        return apiRequest('GET', `/tags?filter[text][in]=${tags.join(',')}`)\n            .then((res) => res.json())\n            .then(({ data }) => {\n                const hydratedTags = []\n    \n                for (const resource of data) {\n                    const tag = new Tag(resource)\n                    tagmap[tag.getAttribute('text')] = true\n                    hydratedTags.push(tag)\n                }\n    \n                // Tags that were not returned from the query will still have\n                // their value set to false. Need to create them.\n                const newTags = tags.filter((tag) => tagmap[tag] === false)\n    \n                // The API does not support creating entities in bulk.\n                // Need to make one request for each new tag.\n                if (newTags.length > 0) {\n                    return Promise\n                        .all(newTags.map((text) => apiRequest('POST', '/tags', { type: 'tags', attributes: { text }})))\n                        .then(r => Promise.all(r.map(res => res.json()))) // Converting returned data to JSON returns a promise\n                        .then(r => r.map(({ data }) => new Tag(data)))\n                        .then(r => r.concat(hydratedTags))\n                } else {\n                    return hydratedTags\n                }\n            })\n            .then((tags) => {\n                const r = {}\n                let c = 0\n    \n                if (author !== null) {\n                    r['author'] = { data: author.toResourceIdentifier() }\n                    c++\n                }\n    \n                if (pets.length > 0) {\n                    r['pets'] = { data: pets.map((id) => ({ type: 'pets', id })) }\n                    c++\n                }\n\n                if (tags.length > 0) {\n                    r['tags'] = { data: tags.map((tag) => tag.toResourceIdentifier()) }\n                    c++\n                }\n    \n                return c > 0 ? r : null\n            })\n            .then((relationships) => super.create(relationships))\n            .then((resource) => this.hydrate(resource))\n    }\n}","import { useContext, useEffect, useState } from 'react'\nimport { useHistory } from 'react-router'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus, faSpinner } from '@fortawesome/free-solid-svg-icons'\n\nimport uploadImage from '../utils/uploadImage'\nimport Post from '../Models/Post'\nimport BackButton from '../components/BackButton'\nimport SessionContext from '../context/SessionContext'\nimport useValidators from '../hooks/useValidators'\nimport getPets from '../utils/getPets'\n\n\nfunction CreatePostPage() {\n    const [file, setFile] = useState(null)\n    const [pets, setPets] = useState([])\n    const [loading, setLoading] = useState(true)\n    const [session] = useContext(SessionContext)\n    const history = useHistory()\n\n    const minChars = (n) => (value) => Promise\n        .resolve(value.length < n ? `Post title must be ${n} or more characters long.` : null)\n\n    const maxChars = (n) => (value) => Promise\n        .resolve(value.length > n ? `Post title length cannot exceed ${n} characters.` : null)\n\n    const lettersOnly = (value) => Promise\n        .resolve(/^[A-Za-z ]*$/.test(value) ? null : 'Each tag must be a word separated by a space.')\n\n    const fields = useValidators({\n        title: [\n            minChars(10),\n            maxChars(35),\n        ],\n\n        text: [],\n\n        tags: [\n            lettersOnly,\n        ]\n    })\n\n    useEffect(() => {\n\n        getPets(session.user.id).then((pets) => {\n\n            setLoading(false)\n\n            setPets(pets.map((pet) => ({ ...pet, isChecked: false })))\n        \n        })\n\n    }, [])\n    \n    const createPost = () => {\n        if (file === null) {\n            window.alert('Posts need an image!')\n            return\n        }\n\n        const tagList = fields.get('tags').split(' ')\n            .map(t => t.trim().toLowerCase())\n            .filter(t => t.length > 0)\n\n        const petList = pets\n            .filter(({ isChecked }) => isChecked)\n            .map(({ id }) => id)\n        \n        const makePostAndAddFields = (image) => (new Post())\n            .setAttribute('image', image)\n            .setAttribute('title', fields.get('title'))\n            .setAttribute('text', fields.get('text'))\n        \n        return uploadImage(file)\n            .then((res) => res.json())\n            .then((res) => res.data)\n            .then(makePostAndAddFields)\n            .then((post) => post.create(session.user, tagList, petList))\n            .then((post) => history.replace(`/post/${post.id}`))\n    }\n\n    const handlePetChange = (index) => () => setPets((items) => {\n        items[index].isChecked = !items[index].isChecked\n\n        return items\n    })\n\n    const handleSubmit = () => fields.getValidity()\n        .then((valid) => valid && createPost())\n\n    return (\n        <>\n            <h1 className=\"mb-4\"><BackButton />Create Post</h1>\n\n            <Form>\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Title</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            type=\"text\"\n                            isInvalid={fields.isInvalid('title')}\n                            placeholder=\"Enter post title\"\n                            onChange={fields.set('title')} />\n\n                        {fields.isInvalid('title') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('title')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Image</Form.Label>\n                    <Col sm={10}>\n                        <Form.File\n                            custom\n                            label={file ? file.name : 'Upload in image'}\n                            onChange={({ target }) => setFile(target.files.item(0))} />\n\n                        <Form.Control.Feedback type=\"invalid\">\n                            A post image is required.\n                        </Form.Control.Feedback>\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Caption</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            as=\"textarea\"\n                            isInvalid={fields.isInvalid('text')}\n                            placeholder=\"Enter post caption\"\n                            onChange={fields.set('text')} />\n\n                        {fields.isInvalid('text') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('text')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Tags</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            type=\"text\"\n                            isInvalid={fields.isInvalid('tags')}\n                            placeholder=\"Enter tags separated by a space\"\n                            onChange={fields.set('tags')} />\n\n                        {fields.isInvalid('tags') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('tags')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Pets in this post</Form.Label>\n\n                    <Col sm={10}>\n                        {loading && (\n                            <FontAwesomeIcon className=\"my-3\" icon={faSpinner} pulse />\n                        )}\n\n                        {!loading && pets.map((pet, i) => (\n                            <Form.Check\n                                key={i}\n                                type=\"checkbox\"\n                                label={pet.name}\n                                defaultChecked={pet.isChecked}\n                                onChange={handlePetChange(i)} />\n                        ))}\n\n                        {!loading && pets.length === 0 && (\n                            <Form.Control plaintext readOnly defaultValue=\"You have no pets!\" />\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                        <Button variant=\"primary\" onClick={handleSubmit}>\n                            <FontAwesomeIcon icon={faPlus} className=\"mr-2\" />\n                            Create Post\n                        </Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n        </>\n    )\n}\n\nexport default CreatePostPage","import User from '../Models/User'\nimport apiRequest from './apiRequest'\n\nfunction getSession() {\n    return apiRequest('GET', '/session')\n        .then((res) => res.json())\n        .then(({ data }) => data.uid)\n        .then((uid) => apiRequest('GET', `/users/${uid}?include=subscriptions`))\n        .then((res) => res.json())\n        .then(({ data, included }) => ({\n            user: new User(data),\n            subscriptions: included.map((pet) => pet.id)\n        }))\n}\n\nexport default getSession\n","import { useState, useEffect, useContext } from 'react'\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useHistory,\n    useRouteMatch,\n    Redirect\n} from 'react-router-dom'\n\nimport Container from 'react-bootstrap/Container'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Navbar from 'react-bootstrap/Navbar'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBone, faCog, faSignInAlt, faSignOutAlt, faUser, faUserCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport apiRequest from './utils/apiRequest'\nimport SessionContext from './context/SessionContext'\nimport ExplorePage from './pages/dashboard/ExplorePage'\nimport SubscriptionsPage from './pages/dashboard/SubscriptionsPage'\nimport FavoritesPage from './pages/dashboard/FavoritesPage'\nimport SettingsPage from './pages/SettingsPage'\nimport SignInPage from './pages/SignInPage'\nimport SignUpPage from './pages/SignUpPage'\nimport PostPage from './pages/PostPage'\nimport CreatePostPage from './pages/CreatePostPage'\nimport getSession from './utils/getSession'\n\n// This part of the navigation bar shows if the user is not logged in.\nfunction Anonymous() {\n    const history = useHistory()\n\n    // Use history.push to programarically navigate to pages.\n    return (\n        <Nav className=\"ml-auto\">\n            <NavDropdown title={<FontAwesomeIcon icon={faUserCircle} size=\"2x\" />}>\n                <NavDropdown.Item onClick={() => history.push('/signin')}>\n                    <FontAwesomeIcon className=\"mr-2\" icon={faSignInAlt} /> Sign In\n                </NavDropdown.Item>\n\n                <NavDropdown.Item onClick={() => history.push('/signup')}>\n                    <FontAwesomeIcon className=\"mr-2\" icon={faUser} /> Sign Up\n                </NavDropdown.Item>\n            </NavDropdown>\n        </Nav>\n    )\n}\n\nfunction Authenticated() {\n    const [session, setSession] = useContext(SessionContext)\n    const history = useHistory()\n    const avatarStyle = {\n        borderRadius: '50%',\n        border: '1px solid #888',\n        width: '48px',\n        height: '48px'\n    }\n\n    const avatar = session.user.getAttribute('avatar') === null\n        ? <FontAwesomeIcon icon={faUserCircle} size=\"2x\" />\n        : <img style={avatarStyle} src={session.user.getAttribute('avatar')} />\n    \n    // Navigate to the explore page on logout\n    const logout = () => apiRequest('DELETE', '/session')\n        .then(() => setSession(null))\n        .then(() => history.push('/'))\n\n    return (\n        <Nav className=\"ml-auto\">\n            <NavDropdown className=\"text-center\" title={avatar}>\n                <NavDropdown.ItemText className=\"text-center\">\n                    {session.user.getAttribute('username')}\n                </NavDropdown.ItemText>\n\n                <NavDropdown.Divider />\n\n                <NavDropdown.Item as={Link} to=\"/settings\">\n                    <FontAwesomeIcon className=\"mr-2\" icon={faCog} />Settings\n                </NavDropdown.Item>\n\n                <NavDropdown.Item onClick={logout}>\n                    <FontAwesomeIcon className=\"mr-2\" icon={faSignOutAlt} />Sign Out\n                </NavDropdown.Item>\n            </NavDropdown>\n        </Nav>\n    )\n}\n\nfunction DashboardNav() {\n    const { url } = useRouteMatch()\n    const history = useHistory()\n    const prev = history.location.pathname.split('/').pop()\n    const pages = ['explore', 'subscriptions'/*, 'favorites'*/]\n    const [page, setPage] = useState(pages.includes(prev) ? prev : 'explore')\n\n    const goToPage = (p) => () => {\n        setPage(p)\n        history.replace(`${url}/${p}`)\n    }\n\n    return (\n        <ButtonGroup className=\"d-flex my-4\">\n            {pages.map((p, i) => (\n                <Button\n                    key={i}\n                    variant={p === page ? 'primary' : 'secondary'}\n                    onClick={goToPage(p)}>{`${p.charAt(0).toUpperCase()}${p.substr(1)}`}</Button>\n            ))}\n        </ButtonGroup>\n    )\n}\n\nfunction Dashboard() {\n    const [session] = useContext(SessionContext)\n    const { url } = useRouteMatch()\n\n    return (\n        <>\n            {session ? <DashboardNav /> : null}\n\n            <Switch>\n                <Route path={`${url}/explore`}>\n                    <ExplorePage />\n                </Route>\n\n                <Route path={`${url}/subscriptions`}>\n                    <SubscriptionsPage />\n                </Route>\n\n                <Route path={`${url}/favorites`}>\n                    <FavoritesPage />\n                </Route>\n\n                <Route path={`${url}/`}>\n                    <Redirect to={`${url}/explore`} />\n                </Route>\n            </Switch>\n        </>\n    )\n}\n\nfunction Main({ title }) {\n\n    // Component state is managed using the useState hook.\n    // Use the setSession function to update the session; don't try to mutate\n    // the session variable directly!\n    const sessionState = useState(null)\n    const [session, setSession] = sessionState\n\n    // useEffect hooks into this component's lifecycle. When it is loaded, it\n    // runs the provided callback function. If another callback is provided\n    // within the callback function, it will run it when the component is\n    // unloaded. In other words, inner callback = setup, outer callback =\n    // teardown.\n    //\n    // In this case, we're listening to the session observable. If it's not\n    // unsubscribed from when the component is not in use, a memory leak can\n    // occur.\n    useEffect(() => {\n        getSession()\n            .then(setSession)\n            .catch(() => console.log('Not logged in'))\n    }, [])\n\n    // Since this app is served in a directory within the server, the basename\n    // for all routes must be specified.\n    return (\n        <SessionContext.Provider value={sessionState}>\n            <Router>\n                <Navbar className=\"mb-4\" bg=\"dark\" variant=\"dark\" expand=\"lg\">\n                    <Container>\n                        <Navbar.Brand as={Link} to=\"/\">\n                            {title}<FontAwesomeIcon className=\"ml-2\" icon={faBone} />\n                        </Navbar.Brand>\n\n                        <Navbar.Toggle aria-controls=\"main-nav\" />\n                        \n                        <Navbar.Collapse id=\"main-nav\">\n                            {session ? <Authenticated /> : <Anonymous />}\n                        </Navbar.Collapse>\n                    </Container>\n                </Navbar>\n                \n                <Container>\n                    <Switch>\n                        <Route path=\"/dashboard\">\n                            <Dashboard />\n                        </Route>\n\n                        <Route path=\"/post/:id\">\n                            <PostPage />\n                        </Route>\n\n                        <Route path=\"/post\">\n                            <CreatePostPage />\n                        </Route>\n\n                        <Route path=\"/signin\">\n                            <SignInPage />\n                        </Route>\n\n                        <Route path=\"/signup\">\n                            <SignUpPage />\n                        </Route>\n\n                        <Route path=\"/settings\">\n                            <SettingsPage />\n                        </Route>\n\n                        <Route exact path=\"/\">\n                            <Redirect to=\"/dashboard\" />\n                        </Route>\n                    </Switch>\n                </Container>\n            </Router>\n        </SessionContext.Provider>\n    )\n}\n\nexport default Main\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Main from './Main'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Main title=\"The Pet Park\" />\n    </React.StrictMode>,\n    \n    document.getElementById('root')\n)\n"],"sourceRoot":""}