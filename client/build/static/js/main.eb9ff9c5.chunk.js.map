{"version":3,"sources":["utils/apiRequest.js","utils/convertDateTime.js","utils/formatDate.js","context/SessionContext.js","Models/Base.js","Models/User.js","utils/getPosts.js","utils/debouce.js","pages/dashboard/ExplorePage.jsx","components/CommentForm.jsx","components/BackButton.jsx","components/Comment.jsx","pages/PostPage.jsx","pages/dashboard/SubscriptionsPage.jsx","pages/dashboard/FavoritesPage.jsx","utils/uploadImage.js","hooks/useValidators.js","pages/settings/AccountPage.jsx","pages/settings/PetsPage.jsx","pages/SettingsPage.jsx","utils/convertToJsonOrThrowError.js","pages/SignInPage.jsx","pages/SignUpPage.jsx","Models/Tag.js","Models/Post.js","pages/CreatePostPage.jsx","Main.jsx","index.jsx"],"names":["apiRequest","method","target","data","url","init","headers","includes","JSON","stringify","fetch","convertDateTime","datetime","split","datePart","timePart","year","month","date","hours","minutes","seconds","Date","UTC","DAYS","MONTHS","formatDate","fromDB","getDay","getMonth","getDate","getFullYear","SessionContext","createContext","Base","obj","this","id","attributes","dirtyAttributes","relationships","attr","val","push","type","a","payload","then","res","json","relationship","objs","updateRelationship","map","toResourceIdentifier","User","password","hydrate","current","new","username","getAttribute","pet","updateToManyRelationship","post","getPosts","additionalParams","params","join","included","items","related","author","tags","image","title","text","createdAt","find","filter","debounce","time","callback","override","undefined","active","timeout","args","handler","apply","window","clearTimeout","setTimeout","ExplorePage","useContext","session","useState","posts","setPosts","searchMode","setSearchMode","history","useHistory","handleSearch","value","filterParam","key","useEffect","Form","Group","Control","placeholder","onChange","ButtonGroup","className","Button","onClick","icon","faPlus","Row","i","Col","xs","sm","md","Card","to","Img","src","Body","Title","Text","length","variant","CommentForm","onSubmitted","setText","inputRef","useRef","as","ref","user","catch","console","log","BackButton","style","cursor","faArrowCircleLeft","size","replace","Comment","avatar","width","height","borderRadius","border","alt","faUserCircle","Media","PostPage","useParams","setPost","comments","setComments","getComments","pets","ListGroup","Item","faPaw","name","comment","faSpinner","pulse","SubscriptionsPage","FavoritesPage","uploadImage","file","body","FormData","append","useValidators","validators","initialState","Object","keys","dirty","error","fields","setFields","get","field","validate","reduce","fn","e","Promise","resolve","prev","set","isInvalid","getError","getValidity","all","allValid","valid","AccountPage","setSession","setAvatar","checkEmpty","newPassword","noValidate","Label","column","Feedback","span","offset","updatePassword","alert","code","File","custom","label","files","item","setAttribute","update","s","PetsPage","setPets","petName","createPet","promise","img","owner","SettingsPage","useRouteMatch","path","page","setPage","goToPage","p","charAt","toUpperCase","substr","exact","convertToJsonOrThrowError","status","SignInPage","setUsername","setPassword","debounced","setter","uid","subscriptions","SignUpPage","checkExists","pop","firstName","lastName","email","create","Tag","Post","tagmap","tag","hydratedTags","resource","newTags","r","concat","c","CreatePostPage","n","setFile","loading","setLoading","maxChars","test","isChecked","Check","defaultChecked","index","plaintext","readOnly","defaultValue","tagList","t","trim","toLowerCase","petList","createPost","Anonymous","Nav","NavDropdown","faSignInAlt","faUser","Authenticated","ItemText","Divider","Link","faCog","faSignOutAlt","Dashboard","Main","sessionState","err","Provider","Navbar","bg","expand","Container","Brand","faBone","Toggle","aria-controls","Collapse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb9ff9c5.chunk.js","sourcesContent":["function apiRequest(method, target, data = null) {\n    const url = `https://lamp.cse.fau.edu/~cen4010_s21_g01/api-v1.php${target}`\n    const init = {\n        method,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept':       'application/json',\n        }\n    }\n\n    if (['POST', 'PUT', 'PATCH'].includes(method)) {\n        init['body'] = JSON.stringify({ data })\n    }\n\n    return fetch(url, init)\n}\n\nexport default apiRequest\n","/**\n * In MySQL, the DATETIME data type returns dates using the \"YYYY-MM-DD HH:II:SS\"\n * format.\n * \n * Also worth noting that dates are stored relative to UTC.\n * \n * @param {string} datetimeString\n * @returns {Date} A Date object initialized using provided string.\n */\nfunction convertDateTime(datetime) {\n    const [datePart, timePart] = datetime.split(' ')\n    const [year, month, date] = datePart.split('-')\n    const [hours, minutes, seconds] = timePart.split(':')\n\n    // Note: months start at zero, so Jan = 0, Feb = 1, and so on.\n    return new Date(Date.UTC(year, month - 1, date, hours, minutes, seconds))\n}\n\nexport default convertDateTime\n","import convertDateTime from './convertDateTime'\n\nconst DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\nconst MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n                'Oct', 'Nov', 'Dec']\n\nfunction formatDate(fromDB) {\n    const date = convertDateTime(fromDB)\n\n    return `${DAYS[date.getDay()]}, ${MONTHS[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`\n}\n\nexport default formatDate","import { createContext } from 'react'\n\nconst SessionContext = createContext()\n\nexport default SessionContext","import apiRequest from '../utils/apiRequest'\n\nexport default class Base\n{\n    constructor(obj = {}) {\n        this.id = obj.id || null\n        this.attributes = obj.attributes || {}\n        this.dirtyAttributes = []\n        this.relationships = obj.relationships || {}\n    }\n\n    // Child classes must override this method!\n    get type() {\n        return 'generic'\n    }\n\n    hydrate(obj) {\n        this.id = obj.id || null\n        this.attributes = obj.attributes || {}\n        this.relationships = obj.relationships || {}\n\n        return this\n    }\n\n    setAttribute(attr, val) {\n        this.dirtyAttributes.push(attr)\n        this.attributes[attr] = val\n\n        return this\n    }\n\n    getAttribute(attr) {\n        return this.attributes[attr]\n    }\n\n    toResourceIdentifier() {\n        return {\n            type: this.type,\n            id:   this.id,\n        }\n    }\n\n    toResource() {\n        return {\n            type:       this.type,\n            id:         this.id,\n            attributes: this.attributes,\n        }\n    }\n\n    create(relationships = null) {\n        const attributes = {}\n\n        for (const a of this.dirtyAttributes) {\n            attributes[a] = this.attributes[a]\n        }\n\n        const payload = { type: this.type, attributes }\n\n        if (relationships !== null) {\n            payload['relationships'] = relationships\n        }\n\n        return apiRequest('POST', `/${this.type}`, payload)\n            .then((res) => {\n                this.dirtyAttributes = []\n\n                return res.json()\n            })\n            .then((res) => res.data)\n    }\n\n    update() {\n        const attributes = {}\n\n        for (const a of this.dirtyAttributes) {\n            attributes[a] = this.attributes[a]\n        }\n\n        const payload = { type: this.type, id: this.id, attributes }\n\n        return apiRequest('PATCH', `/${this.type}/${this.id}`, payload)\n            .then(() => {\n                this.dirtyAttributes = []\n\n                return this\n            })\n    }\n\n    delete() {\n        return apiRequest('DELETE', `/${this.type}/${this.id}`);\n    }\n\n    updateRelationship(method, relationship, payload) {\n        return apiRequest(\n            method,\n            `/${this.type}/${this.id}/relationships/${relationship}`,\n            payload\n        )\n    }\n\n    updateToManyRelationship(method, relationship, objs) {\n        return this.updateRelationship(\n            method,\n            relationship,\n            objs.map(obj => obj.toResourceIdentifier())\n        )\n    }\n\n    updateToOneRelationship(method, relationship, obj) {\n        return this.updateRelationship(\n            method,\n            relationship,\n            obj.toResourceIdentifier()\n        )\n    }\n}","import Base from './Base'\nimport apiRequest from '../utils/apiRequest'\n\nexport default class User extends Base\n{\n    get type() {\n        return 'users'\n    }\n\n    /**\n     * Creating users is a two-step process: a resource must be created and\n     * their password must be set immediately afterward.\n     * \n     * @param {string}   password\n     */\n    create(password) {\n        const type = this.type\n        const attributes = {}\n\n        for (const attr of this.dirtyAttributes) {\n            attributes[attr] = this.attributes[attr]\n        }\n\n        return apiRequest('POST', `/${type}`, { type, attributes })\n            .then(res => res.json())\n            .then(({ data }) => {\n                this.hydrate(data)\n                return apiRequest('PUT', `/passwords/${data.id}`, password)\n            }).then(res => this)\n    }\n\n    updatePassword(current, password) {\n        return apiRequest('PATCH', `/passwords/${this.id}`, { current, new: password })\n    }\n\n    login(password) {\n        return apiRequest('POST', '/session', {\n            username: this.getAttribute('username'),\n            password\n        })\n    }\n\n    logout() {\n        return apiRequest('DELETE', '/session')\n    }\n\n    subscribeTo(pet) {\n        return this.updateToManyRelationship('POST', 'subscriptions', [pet])\n    }\n\n    unsubscribeFrom(pet) {\n        return this.updateToManyRelationship('DELETE', 'subscriptions', [pet])\n    }\n\n    addFavorite(post) {\n        return this.updateToManyRelationship('POST', 'favorites', [post])\n    }\n\n    removeFavorite(post) {\n        return this.updateToManyRelationship('DELETE', 'favorites', [post])\n    }\n\n    like(post) {\n        return this.updateToManyRelationship('POST', 'liked-posts', [post])\n    }\n\n    unlike(post) {\n        return this.updateToManyRelationship('DELETE', 'liked-posts', [post])\n    }\n}","import apiRequest from './apiRequest'\nimport formatDate from './formatDate'\n\n/**\n * Since both the explore and subscriptions pages hit the same endpoint but\n * with different parameters, it was worth abstracting shared logic into its\n * own utility function.\n * \n * @param {string[]} additionalParams \n * @returns Promise containing returned posts with their authors and tags.\n */\nfunction getPosts(additionalParams = []) {\n    const params = [\n        'include=author,tags',\n        'fields[users]=username',\n        'sort=-createdAt',\n        ...additionalParams,\n    ]\n\n    return apiRequest('GET', `/posts?${params.join('&')}`)\n        .then((res) => res.json())\n        .then(({ data, included }) => {\n            const items = []\n\n            for (const { id, attributes, relationships } of data) {\n                \n                // TODO:    Pets and likes should be here as well but they are\n                //          not represented in the front-end yet.\n                // Note that some relationships might not be available, such as\n                // tags.\n                const related = {\n                    author: relationships.author.data.id,\n                    tags: 'tags' in relationships ? relationships.tags.data.map(({ id }) => id) : [],\n                }\n\n                items.push({\n                    id,\n                    image: attributes.image,\n                    title: attributes.title,\n                    text: attributes.text,\n                    createdAt: formatDate(attributes.createdAt),\n\n                    // Posts MUST have an author so it should be safe to assume\n                    // that the find method returns a resource object of\n                    // type \"users\".\n                    author: included\n                        .find(({ type, id }) => type === 'users' && id === related.author)\n                        .attributes\n                        .username,\n\n                    tags: included\n                        .filter(({ type, id }) => type === 'tags' && related.tags.includes(id))\n                        .map(({ attributes }) => attributes.text),\n                })\n            }\n\n            return items\n        })\n}\n\nexport default getPosts","// A decorator function that runs the callback only when a certain\n// amount of time has passed since the last time the function was invoked.\n//\n// Inspired by the following implementation by David Walsh:\n// https://davidwalsh.name/javascript-debounce-function\nfunction debounce(time, callback, override = undefined) {\n    let active = false\n    let timeout = null\n\n    return function (...args) {\n        // Run the following after the timeout is complete.\n        //\n        // A nice quirk of arrow functions is that they have no \"this\",\n        // so one can reference the parent context without setting it to\n        // another variable. Before arrow functions were introduced,\n        // it was common to do \"var self = this\" to reference the parent\n        // function's context.\n        const handler = () => {\n            callback.apply(this, args)\n            active = false\n        }\n\n        active && window.clearTimeout(timeout)\n\n        // If override condition is set, ignore debouncing behavior.\n        if (typeof override === 'function' && override.apply(this, args)) {\n            handler()\n        } else {\n            timeout = window.setTimeout(handler, time)\n            active = true\n        }\n    }\n}\n\nexport default debounce\n","import { useEffect, useState, useContext } from 'react'\n\nimport { Link, useHistory } from 'react-router-dom'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\n\nimport SessionContext from '../../context/SessionContext'\nimport getPosts from '../../utils/getPosts'\nimport debounce from '../../utils/debouce'\n\nfunction ExplorePage() {\n    const [session, setSession] = useContext(SessionContext)\n    const [posts, setPosts] = useState([])\n    //const [moreAvailable, setMoreAvailable] = useState(true)\n    const [searchMode, setSearchMode] = useState(false)\n    const history = useHistory()\n\n    //const addPosts = (newPosts) => setPosts((oldPosts) => oldPosts.concat(newPosts))\n\n    const goToCreatePost = () => history.push('/post')\n    \n    //const seeMorePosts = () => {}\n\n    const handleSearch = debounce(\n        1000, // Wait for one second before doing anything.\n\n        ({ target }) => {\n\n            if (target.value === '') {\n\n                if (searchMode) {    \n\n                    setSearchMode(false)\n\n                    getPosts().then(setPosts)\n\n                }\n\n            } else {\n\n                const filterParam = `filter[tags.text][in]=${target.value.split(' ').join(',')}`\n\n                setSearchMode(true)\n\n                getPosts([filterParam]).then(setPosts)\n\n            }\n\n        },\n\n        ({ key, target }) => key === 'Enter' || (key === 'Backspace' && target.value === '')\n    )\n    \n    useEffect(() => {\n        const params = []\n\n        // Anonymous users can only view the 10 latest posts.\n        if (session !== null) {\n            params.push('page[size]=10')\n        }\n\n        getPosts(params).then(setPosts)\n            /*.then((posts) => {\n                if (posts.length === 0) {\n                    setMoreAvailable(false)\n                }\n\n                return posts\n            })\n            .then(addPosts)*/\n        /*const item = {\n            id: '1',\n            image: 'https://i.imgur.com/uDCyg1E.jpeg',\n            title: 'Doggo',\n            text: 'Cute doggy :)',\n            createdAt: formatDate('2021-04-11 12:30:00'),\n\n            // Posts MUST have an author so it should be safe to assume\n            // that the find method returns a resource object of\n            // type \"users\".\n            author: 'tgalinis2020',\n            tags: ['cute', 'dog', 'aww'],\n        }\n\n        const items = []\n\n        for (let i = 0; i < (session ? 24 : 10); ++i) {\n            items.push(item)\n        }\n\n        setPosts(items)*/\n    }, [setPosts, session])\n\n    return (\n        <>\n            {session && (\n                <Form>\n                    <Form.Group>\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"Search for posts by tag...\"\n                            onChange={handleSearch} />\n                    </Form.Group>\n\n                    <ButtonGroup className=\"my-2\">\n                        <Button className=\"ml-auto\" onClick={goToCreatePost}>\n                            <FontAwesomeIcon className=\"mr-2\" icon={faPlus} />\n                            Create Post\n                        </Button>\n                    </ButtonGroup>\n                </Form>\n            )}\n\n            <Row>\n                {posts.map(({ id, image, title, author, text, createdAt, tags }, i) => (\n                    <Col key={i} xs={12} sm={6} md={4}>\n                        <Card className=\"my-4\">\n                            <Link to={`/post/${id}`}>\n                                <Card.Img src={image} />\n                            </Link>\n\n                            <Card.Body>\n                                <Card.Title>{title}</Card.Title>\n\n                                <Card.Text>\n                                    <small className=\"text-muted\">Posted by {author} on {createdAt}</small>\n                                    \n                                    <p>{text}</p>\n                                    \n                                    {tags.length > 0 && (\n                                        <p className=\"text-muted\">Tags: {tags.join(', ')}</p>\n                                    )}\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                ))}\n            </Row>\n\n            {posts.length === 0 && (\n                <p>There are currently no posts.</p>\n            )}\n\n            {session === null && (\n                <div className=\"my-4 text-center\">\n                    <p>You must be logged in to see more posts. <Button variant=\"primary\" onClick={() => history.push('/signin')}>Sign in</Button></p>\n                    <p>Don't have an account? <Button variant=\"primary\" onClick={() => history.push('/signup')}>Sign up</Button></p>\n                </div>\n            )}\n\n            {/*moreAvailable && (\n                <ButtonGroup className=\"d-block text-center my-4\">\n                    <Button onClick={seeMorePosts}>See More</Button>\n                </ButtonGroup>\n            )*/}\n        </>\n    )\n}\n\nexport default ExplorePage","import { useState, useRef } from 'react'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport apiRequest from '../utils/apiRequest'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\n\nfunction CommentForm({ post, session, onSubmitted }) {\n    const [text, setText] = useState('')\n    const inputRef = useRef(null)\n    \n    const submit = () => apiRequest('POST', '/comments', {\n            type: 'comments',\n            attributes: { text },\n            relationships: {\n                author: {\n                    data: { type: 'users', id: session.user.id }\n                },\n\n                post: {\n                    data: { type: 'posts', id: post.id }\n                }\n            }\n        })\n        .then((res) => res.json())\n        .then((res) => res.data)\n        .then(onSubmitted)\n        .then(() => setText(''))\n        .then(() => {\n            inputRef.current.value = ''\n        })\n        .catch(console.log)\n\n    return (\n        <Form>\n            <Form.Group>\n                <Form.Control as=\"textarea\" ref={inputRef} onChange={({ target }) => setText(target.value)}></Form.Control>\n            </Form.Group>\n\n            <Form.Group>\n                <Button variant=\"primary\" onClick={submit}>\n                    <FontAwesomeIcon className=\"mr-2\" icon={faPlus} />\n                    Add Comment\n                </Button>\n            </Form.Group>\n        </Form>\n    )\n}\n\nexport default CommentForm","import { useHistory } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowCircleLeft } from '@fortawesome/free-solid-svg-icons'\n\nfunction BackButton() {\n    const history = useHistory()\n\n    return (\n        <FontAwesomeIcon\n            style={{ cursor: \"pointer\" }}\n            className=\"mr-3\"\n            icon={faArrowCircleLeft}\n            size=\"1x\"\n            onClick={() => history.replace('/dashboard')} />\n    )\n}\n\nexport default BackButton","import Media from 'react-bootstrap/Media'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport formatDate from '../utils/formatDate'\n\nfunction Comment({ text, createdAt, author }) {\n    const commentStyles = {\n        width: '64px',\n        height: '64px',\n        borderRadius: '50%',\n        border: '1px solid #ccc' \n    }\n    \n    const image = author.avatar\n        ? <img style={commentStyles} className=\"mr-3\" src={author.avatar} alt={`${author.username}'s profile picture`} />\n        : <FontAwesomeIcon className=\"mr-3\" size=\"4x\" icon={faUserCircle} />\n\n    return (\n        <Media className=\"mb-4\">\n            {image}\n\n            <Media.Body>\n                <small className=\"text-muted\">Posted by {author.username} on {formatDate(createdAt)}</small>\n                <p>{text}</p>\n            </Media.Body>\n        </Media>\n    )\n}\n\nexport default Comment","import { useState, useEffect, useContext } from 'react'\nimport { useHistory, useParams, useRouteMatch } from 'react-router-dom'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport Media from 'react-bootstrap/Media'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport FormGroup from 'react-bootstrap/esm/FormGroup'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faHeart, faPaw, faUserCircle, faSpinner } from '@fortawesome/free-solid-svg-icons'\n\nimport formatDate from '../utils/formatDate'\nimport apiRequest from '../utils/apiRequest'\n\nimport CommentForm from '../components/CommentForm'\nimport BackButton from '../components/BackButton'\nimport Comment from '../components/Comment'\nimport SessionContext from '../context/SessionContext'\n\nfunction PostPage() {\n    const [session] = useContext(SessionContext)\n    const { id } = useParams()\n    \n    //*\n    const defaultPost = null\n    const defaultComments = []\n    /*/\n    const defaultPost = {\n        id: '1',\n        image: 'https://i.imgur.com/uDCyg1E.jpeg',\n        title: 'Doggo',\n        text: 'Cute doggy :)',\n        createdAt: formatDate('2021-04-11 12:30:00'),\n        author: 'tgalinis2020',\n        tags: ['cute', 'dog', 'aww'],\n        pets: [{ id: '1', name: 'Mr. Meow', avatar: null }, { id: '2', name: 'Bean', avatar: null }],\n    }\n\n    const defaultComments = [\n        {\n            text: 'Aww, such a good boi!',\n            createdAt: formatDate('2021-04-12 06:00:23'),\n            author: 'blahblah123',\n        },\n\n        {\n            text: 'Precious.',\n            createdAt: formatDate('2021-04-12 08:21:42'),\n            author: 'ilovepets99',\n        }\n    ]\n    //*/\n    const [post, setPost] = useState(defaultPost)\n    const [comments, setComments] = useState(defaultComments)\n    //const [commentsAvailable, setCommentsAvailable] = useState(true)\n\n    // Since included data cannot be paginated and sorted, two separate requests\n    // are made for getting posts and comments.\n    const getPost = () => apiRequest('GET', `/posts/${id}?include=author,tags,pets&fields[users]=username,avatar`)\n        .then((res) => res.json())\n        .then(({ data, included }) => {\n            const { id, attributes, relationships } = data\n            const { image, title, text, createdAt } = attributes\n            \n            const related = {\n                author: relationships.author.data.id,\n            }\n\n            // Pluck the IDs from to-many relationships, if applicable.\n            for (const key of ['tags', 'pets', 'likes']) {\n                related[key] = key in relationships ? relationships[key].data.map(({ id }) => id) : []\n            }\n\n            return {\n                id,\n                image,\n                title,\n                text,\n                createdAt: formatDate(createdAt),\n\n                author: included\n                    .find(({ type, id }) => type === 'users' && id === related.author)\n                    .attributes,\n\n                tags: included\n                    .filter(({ type, id }) => type === 'tags' && related.tags.includes(id))\n                    .map(({ attributes }) => attributes.text),\n\n                pets: included\n                    .filter(({ type, id }) => type === 'pets' && related.pets.includes(id)),\n            }\n        })\n        .then(setPost)\n\n    const getComments = () => apiRequest('GET', `/posts/${id}/comments?include=author&fields[users]=username,avatar&sort=-createdAt`)\n        .then((res) => res.json())\n        .then(({ data, included }) => data.map(({ id, attributes, relationships }) => {\n            const author = included\n                .find(({ id }) => id === relationships.author.data.id)\n\n            return {\n                id,\n                text: attributes.text,\n                createdAt: attributes.createdAt,\n                author: author.attributes,\n            }\n        }))\n        .then(setComments)\n\n    const avatarStyle = {\n        width: '64px',\n        height: '64px',\n        borderRadius: '50%',\n        border: '1px solid #ccc' \n    }\n\n    useEffect(() => getPost().then(getComments), [setPost, setComments])\n\n    return (\n        <>\n            {post ? (\n                <>\n                    <h1><BackButton />{post.title}</h1>\n\n                    <Card className=\"my-4\">\n                        <Card.Img src={post.image} />\n\n                        <Card.Body>\n                            <Card.Text>\n                                <Media className=\"mb-4\">\n                                    {post.author.avatar ? (\n                                        <img style={avatarStyle} className=\"mr-3\" src={post.author.avatar} alt={`${post.author.username}'s profile picture`} />\n                                    ) : (\n                                        <FontAwesomeIcon className=\"mr-3\" size=\"4x\" icon={faUserCircle} />\n                                    )}\n\n                                    <Media.Body>\n                                        <small className=\"text-muted\">Posted by {post.author.username} on {post.createdAt}</small>\n                                        \n                                        <p>{post.text}</p>\n                                    </Media.Body>\n                                </Media>\n                                \n                                {post.pets.length > 0 && (\n                                    <div className=\"my-3\">\n                                        <p className=\"text-muted\">{post.author.username}'s pets in this post:</p>\n\n                                        <ListGroup>\n                                            {post.pets.map((pet, i) => (\n                                                <ListGroup.Item key={i}>\n                                                    <Media>\n                                                        {pet.avatar === null ? (\n                                                            <FontAwesomeIcon icon={faPaw} size=\"2x\" className=\"d-block mr-3\" />\n                                                        ) : (\n                                                            <img\n                                                                style={{ width: '64px', height: '64px', borderRadius: '50%' }}\n                                                                src={pet.avatar}\n                                                                className=\"mr-3\"\n                                                            />\n                                                        )}\n                                                        <Media.Body>\n                                                            {pet.name}\n\n                                                            {/*<Button className=\"d-block float-right\" variant=\"success\">Subscribe</Button>*/}\n                                                        </Media.Body>\n                                                    </Media>\n                                                </ListGroup.Item>\n                                            ))}\n                                        </ListGroup>\n                                    </div>\n                                )}\n\n                                {post.tags.length > 0 && (\n                                    <p className=\"text-muted\">Tags: {post.tags.join(', ')}</p>\n                                )}\n                            </Card.Text>\n                        </Card.Body>\n                    </Card>\n\n                    \n                    {session && <CommentForm session={session} post={post} onSubmitted={getComments} />}\n\n                    <hr />\n\n                    <h3 className=\"mb-4\">Comments ({comments.length})</h3>\n\n                    {comments.length > 0 ? (\n                        comments.map((comment, i) => <Comment key={i} {...comment} />)\n                    ) : (\n                        <p>No comments available.</p>\n                    )}\n                </>\n            ) : (\n                <p className=\"text-center my-4\"><FontAwesomeIcon icon={faSpinner} size=\"3x\" pulse /></p>\n            )}\n        </>\n    )\n}\n\nexport default PostPage","function SubscriptionsPage() {\n    return (\n        <h1>Subscriptions</h1>\n    )\n}\n\nexport default SubscriptionsPage","function FavoritesPage() {\n    return (\n        <h1>Favorites</h1>\n    )\n}\n\nexport default FavoritesPage","function uploadImage(file) {\n    const url = `https://lamp.cse.fau.edu/~cen4010_s21_g01/api-v1.php/upload`\n    const body = new FormData()\n\n    body.append('data', file, file.name)\n\n    return fetch(url, { method: 'POST', body })\n}\n\nexport default uploadImage\n","import { useState } from 'react'\n\nimport debounce from '../utils/debouce'\n\n/**\n * A custom hook to ease the form validation process.\n * \n * Validators is an object where the key corresponds to a form field\n * and the value is an array of validation functions.\n * \n * Each validation function must return a promise that itself returns\n * a validation message. If the validation message is null, the field is\n * considered valid.\n * \n * Although it may be inconvenient, promises are used because some validation\n * strategies involve HTTP requests (e.g. checking if a username already exists).\n * For validation that is immediately resolved, return the error message using\n * Promise.resolve.\n */\n function useValidators(validators) {\n    const initialState = {}\n\n    for (const field of Object.keys(validators)) {\n        initialState[field] = { value: '', dirty: false, error: null }\n    }\n\n    const [fields, setFields] = useState(initialState)\n\n    const get = (field) => fields[field].value\n\n    const isInvalid = (field) => fields[field].dirty && fields[field].error !== null\n        \n    const getError = (field) => fields[field].error\n\n    const validate = (field, value) => validators[field]\n        .reduce((a, fn) => a.then((e) => e ?? fn(value, get)), Promise.resolve(null))\n        .then((error) => {\n            setFields((prev) => ({\n                ...prev,\n                [field]: { value, dirty: true, error }\n            }))\n\n            return error === null\n        })\n        .catch(() => {\n            setFields((prev) => ({\n                ...prev,\n                [field]: { value, dirty: true, error: 'Invalid value.' }\n            }))\n\n            return false\n        })\n\n    const set = (field) => debounce(\n        500,\n\n        // Go through each validation function and stop the promise chain\n        // when an error is not null.\n        //\n        // Note: a === accumilated promise\n        //       c === current promise\n        //       e === error message\n        ({ target }) => validate(field, target.value),\n\n        ({ key, target }) => key === 'Enter' || (key === 'Backspace' && target.value === '')\n    )\n        \n    // This eyesore goes through all of the validators for each field\n    // and returns the overall state of the set of fields.\n    const getValidity = () => Promise.all(\n            Object.keys(fields)\n                .map((field) => validate(field, fields[field].value)\n            )\n        )\n        .then((res) => res.reduce((allValid, valid) => allValid && valid, true))\n\n    return { get, set, isInvalid, getError, getValidity }\n}\n\nexport default useValidators","import { useContext, useState } from 'react'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\n\nimport debounce from '../../utils/debouce'\nimport apiRequest from '../../utils/apiRequest'\nimport uploadImage from '../../utils/uploadImage'\nimport useValidators from '../../hooks/useValidators'\nimport SessionContext from '../../context/SessionContext'\n\nfunction AccountPage() {\n    const [session, setSession] = useContext(SessionContext)\n    const [avatar, setAvatar] = useState(null)\n\n    const checkEmpty = (field) => (value) => Promise\n        .resolve(value === '' ? `${field} cannot be empty.` : null)\n\n    const checkMatchesPassword = (value, get) => Promise\n        .resolve(value === get('password') ? 'Passwords should not match' : null)\n\n    const fields = useValidators({\n        password: [\n            checkEmpty('Password'),\n        ],\n\n        newPassword: [\n            checkEmpty('New password'),\n            checkMatchesPassword,\n        ],\n    })\n\n    const updatePassword = () => session.user\n        .updatePassword(fields.get('password'), fields.get('newPassword'))\n        .then((res) => {\n            window.alert(res.code === 204\n                ? 'Password updated!'\n                : 'An error occured while attempting to update your password.'\n            )\n        })\n\n    const updateAvatar = () => uploadImage(avatar)\n        .then((res) => res.json())\n        .then((res) => res.data)\n        .then((url) => session.user.setAttribute('avatar', url))\n        .then((user) => user.update())\n        .then((user) => setSession((s) => ({ ...s, user })))\n        .then(() => window.alert('Avatar updated!'))\n\n    return (\n        <>\n            <Form noValidate>\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Current Password</Form.Label>\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('password')}\n                            type=\"password\"\n                            placeholder=\"Current password\"\n                            onChange={fields.set('password')} />\n                        \n                        {fields.isInvalid('password') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('password')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>New Password</Form.Label>\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('newPassword')}\n                            type=\"password\"\n                            placeholder=\"New password\"\n                            onChange={fields.set('newPassword')} />\n                        \n                        {fields.isInvalid('newPassword') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('newPassword')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                        <Button variant=\"primary\" onClick={updatePassword}>Update Password</Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n\n            <hr />\n\n            <Form noValidate>\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Avatar</Form.Label>\n                    <Col sm={10}>\n                        <Form.File\n                            custom\n                            label={avatar ? avatar.name : 'Upload an image'}\n                            onChange={({ target }) => setAvatar(target.files.item(0))} />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                        <Button variant=\"primary\" onClick={updateAvatar}>Update Avatar</Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n        </>\n    )\n}\n\nexport default AccountPage","import { useContext, useEffect, useState } from 'react'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Media from 'react-bootstrap/Media'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPaw } from '@fortawesome/free-solid-svg-icons'\n\nimport apiRequest from '../../utils/apiRequest'\nimport uploadImage from '../../utils/uploadImage'\nimport SessionContext from '../../context/SessionContext'\nimport useValidators from '../../hooks/useValidators'\n\nfunction PetsPage() {\n    const [session] = useContext(SessionContext)\n    const [avatar, setAvatar] = useState(null)\n    const [pets, setPets] = useState([])\n\n    const checkEmpty = (field) => (value) => Promise\n        .resolve(value === '' ? `${field} cannot be empty.` : null)\n\n    const checkNotExists = (value) => Promise\n        .resolve(pets.includes(value) ? `You already have a pet named \"${value}.\"` : null)\n        \n    const fields = useValidators({\n        petName: [\n            checkEmpty('Pet name'),\n            checkNotExists,\n        ]\n    })\n\n    const createResource = (image) => ({\n        type: 'pets',\n\n        attributes: {\n            name: fields.get('petName'),\n            avatar: image,\n        },\n        \n        relationships: {\n            owner: {\n                data: { type: 'users', id: session.user.id }\n            }\n        }\n    })\n\n    const createPet = () => {\n        const promise = Promise.resolve(null)\n\n        if (avatar !== null) {\n            promise\n                .then(() => uploadImage(avatar))\n                .then((res) => res.json())\n                .then((res) => res.data)\n        }\n\n        return promise\n            .then((img) => apiRequest('POST', '/pets', createResource(img)))\n            .then((res) => res.json())\n            .then((res) => res.data)\n            .then(({ id, attributes }) =>\n                setPets((pets) => ([...pets, {\n                    id,\n                    name: attributes.name,\n                    avatar: attributes.avatar,\n                }]))\n            )\n    }\n\n    const handleAddPet = () => fields.getValidity()\n        .then((valid) => (valid && createPet()))\n\n    const getPets = () => apiRequest('GET', `/users/${session.user.id}/pets`)\n        .then((res) => res.json())\n        .then((res) => res.data)\n        .then((items) => items.map(({ id, attributes }) => ({\n            id,\n            name: attributes.name,\n            avatar: attributes.avatar\n        })))\n\n    useEffect(() => {\n       getPets().then(setPets)\n    }, [setPets])\n\n    return (\n        <>\n            <Form noValidate>\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Pet Name</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('petName')}\n                            type=\"text\"\n                            placeholder=\"Enter you pet's name\"\n                            onChange={fields.set('petName')} />\n                        \n                        {fields.isInvalid('petName') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('petName')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Pet Avatar</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.File\n                            custom\n                            label=\"Upload an image\"\n                            onChange={({ target }) => setAvatar(target.files.item(0))} />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                        <Button variant=\"primary\" onClick={handleAddPet}>Add Pet</Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n\n            <hr />\n\n            <h3>Pets</h3>\n\n            {pets.length > 0 ? (\n                <ListGroup>\n                    {pets.map((pet, i) => (\n                        <ListGroup.Item key={i}>\n                            <Media>\n                                {pet.avatar === null ? (\n                                    <FontAwesomeIcon icon={faPaw} size=\"2x\" className=\"d-block mr-3\" />\n                                ) : (\n                                    <img\n                                        style={{ width: '64px', height: '64px', borderRadius: '50%' }}\n                                        src={pet.avatar}\n                                        className=\"mr-3\"\n                                    />\n                                )}\n                                <Media.Body>\n                                    {pet.name}\n\n                                    {/*<Button className=\"d-block float-right\" variant=\"success\">Subscribe</Button>*/}\n                                </Media.Body>\n                            </Media>\n                        </ListGroup.Item>\n                    ))}\n                </ListGroup>\n            ) : (\n                <p>You have no pets!</p>\n            )}\n        </>\n    )\n}\n\nexport default PetsPage","import { useContext, useState } from 'react'\nimport { Switch, Route, Redirect, useRouteMatch, useHistory } from 'react-router-dom'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Nav from 'react-bootstrap/Nav'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport BackButton from '../components/BackButton'\n\nimport AccountPage from './settings/AccountPage'\nimport PetsPage from './settings/PetsPage'\n\nfunction SettingsPage() {\n    const { url, path } = useRouteMatch()\n    const history = useHistory()\n    const pages = ['account', 'pets'/*, 'subscriptions'*/]\n    const [page, setPage] = useState('account')\n    const goToPage = p => () => {\n        setPage(p)\n        history.replace(`${url}/${p}`)\n    }\n\n    return (\n        <>\n            <h1><BackButton />Settings</h1>\n\n            <ButtonGroup className=\"d-flex my-4\">\n                {pages.map((p, i) => (\n                    <Button\n                        key={i}\n                        variant={p === page ? 'primary' : 'secondary'}\n                        onClick={goToPage(p)}>{`${p.charAt(0).toUpperCase()}${p.substr(1)}`}</Button>\n                ))}\n            </ButtonGroup>\n\n            <Switch>\n                <Route path={`${path}/account`}>\n                    <AccountPage />\n                </Route>\n\n                <Route path={`${path}/pets`}>\n                    <PetsPage />\n                </Route>\n\n                <Route path={`${path}/subscriptions`}>\n                    <p>Manage Subscriptions</p>\n                </Route>\n\n                <Route exact path={`${path}`}>\n                    <Redirect to={`${url}/account`} />\n                </Route>\n            </Switch>\n        </>\n    )\n}\n\nexport default SettingsPage","/**\n * If the response's status code does not match the one provided, the inner\n * function will throw an error.\n * \n * @param {number} status \n * @returns \n */\n function convertToJsonOrThrowError(status) {\n    return function (res) {\n        if (res.status !== status) {\n            throw res.status\n        }\n\n        return res.json()\n    }\n}\n\nexport default convertToJsonOrThrowError","import { useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport Form from 'react-bootstrap/Form'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\n\nimport BackButton from '../components/BackButton'\n\nimport apiRequest from '../utils/apiRequest'\nimport debounce from '../utils/debouce'\nimport convertToJsonOrThrowError from '../utils/convertToJsonOrThrowError'\nimport User from '../Models/User'\nimport SessionContext from '../context/SessionContext'\n\nfunction SignInPage() {\n    const [session, setSession] = useContext(SessionContext)\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const history = useHistory()\n\n    const login = () => apiRequest('POST', '/session', { username, password })\n        .then(convertToJsonOrThrowError(201))\n        .then((res) => res.data)\n        .then(({ uid }) => apiRequest('GET', `/users/${uid}?include=subscriptions`))\n        .then((res) => res.json())\n        .then(({ data, included }) => ({\n            user: new User(data),\n            subscriptions: included.map(({ id }) => id),\n        }))\n        .then(setSession)\n        .then(() => history.replace('/dashboard'))\n        .catch((error) => {\n            console.error(error)\n            // TODO: alerts don't look so nice, replace with something fancier\n            window.alert('Invalid username/password combination!')\n        })\n\n    const debounced = setter => debounce(\n        500,\n\n        ({ target }) => setter(target.value),\n\n        // Ignore debouncing when enter or backspace keys are pressed.\n        ({ key, target }) => key === 'Enter' || (key === 'Backspace' && target.value === '')\n    )\n\n    return (\n        <>\n            <h1 className=\"mb-4\"><BackButton />Sign In</h1>\n\n            <Form>\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Username</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"Enter username\"\n                            onChange={debounced(setUsername)} />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Password</Form.Label>\n                    <Col sm={10}>\n                        <Form.Control\n                            type=\"password\"\n                            placeholder=\"Enter password\"\n                            onChange={debounced(setPassword)} />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                        <Button variant=\"primary\" onClick={login}>Sign In</Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n        </>\n    )\n}\n\nexport default SignInPage","import { useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nimport User from '../Models/User'\n\nimport apiRequest from '../utils/apiRequest'\nimport uploadImage from '../utils/uploadImage'\nimport useValidators from '../hooks/useValidators'\n\nimport BackButton from '../components/BackButton'\nimport SessionContext from '../context/SessionContext'\n\nfunction SignUpPage() {\n    const [avatar, setAvatar] = useState(null)\n    const [session, setSession] = useContext(SessionContext)\n    const history = useHistory()\n    \n    const checkEmpty = (field = 'Value') => (value) => Promise\n        .resolve(value === '' ? `${field} cannot be empty.` : null)\n\n    const checkExists = (field, label = null) => (value) =>\n        apiRequest('GET', `/users?filter[${field}]=${value}`)\n            .then(res => res.json())\n            .then(\n                ({ data }) => typeof data.pop() === 'undefined'\n                    ? null \n                    : `Provided ${label || field} is already in use.`\n            )\n\n    const fields = useValidators({\n        username: [\n            checkEmpty('Username'),\n            checkExists('username'),\n        ],\n\n        password: [\n            checkEmpty('Password'),\n        ],\n\n        firstName: [\n            checkEmpty('First name'),\n        ],\n\n        lastName: [\n            checkEmpty('Last name'),\n        ],\n\n        email: [\n            checkEmpty('E-mail address'),\n            checkExists('email', 'e-mail address')\n        ],\n    })\n\n    const user = new User()\n\n    const handleSubmit = () => fields.getValidity()\n        .then((valid) => (valid && user\n            .setAttribute('firstName', fields.get('firstName'))\n            .setAttribute('lastName', fields.get('lastName'))\n            .setAttribute('email', fields.get('email'))\n            .setAttribute('username', fields.get('username'))\n            .create(fields.get('password'))\n            .then(() => {\n                const promise = apiRequest('POST', '/session', {\n                    username: fields.get('username'),\n                    password: fields.get('password'),\n                })\n\n                if (avatar !== null) {\n                    promise\n                        .then(() => uploadImage(avatar))\n                        .then((res) => res.json())\n                        .then(({ data }) => user.setAttribute('avatar', data))\n                        .then((user) => user.update())\n                }\n\n                return promise\n            })\n            .then(() => setSession({ user, subscriptions: [] }))\n            .then(() => history.replace('/dashboard'))\n            .catch(console.log)\n        ))\n\n    return (\n        <>\n            <h1 className=\"mb-4\"><BackButton />Sign Up</h1>\n\n            <Form noValidate>\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>First Name</Form.Label>\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('firstName')}\n                            type=\"text\"\n                            placeholder=\"Enter first name\"\n                            onChange={fields.set('firstName')} />\n\n                        {fields.isInvalid('firstName') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('firstName')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Last Name</Form.Label>\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('lastName')}\n                            type=\"text\"\n                            placeholder=\"Enter last name\"\n                            onChange={fields.set('lastName')} />\n\n                        {fields.isInvalid('lastName') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('lastName')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>E-mail Address</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('email')}\n                            type=\"text\"\n                            placeholder=\"Enter e-mail address\"\n                            onChange={fields.set('email')} />\n\n                        {fields.isInvalid('email') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('email')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Username</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('username')}\n                            type=\"text\"\n                            placeholder=\"Enter username\"\n                            onChange={fields.set('username')} />\n\n                        {fields.isInvalid('username') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('username')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Password</Form.Label>\n                    <Col sm={10}>\n                        <Form.Control\n                            isInvalid={fields.isInvalid('password')}\n                            type=\"password\"\n                            placeholder=\"Enter password\"\n                            onChange={fields.set('password')} />\n                        \n                        {fields.isInvalid('password') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('password')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Avatar</Form.Label>\n                    <Col sm={10}>\n                        <Form.File\n                            custom\n                            label=\"Upload an image\"\n                            onChange={({ target }) => setAvatar(target.files.item(0))} />\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                        <Button variant=\"primary\" onClick={handleSubmit}>Sign Up</Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n        </>\n    )\n}\n\nexport default SignUpPage","import Base from './Base'\n\nexport default class Tag extends Base\n{\n    get type() {\n        return 'tags'\n    }\n}","import apiRequest from '../utils/apiRequest'\nimport Base from './Base'\nimport Tag from './Tag'\n\nexport default class Post extends Base\n{\n    get type() {\n        return 'posts'\n    }\n\n    // Posts should immediately be associated with an author upon creation.\n    // Note that provided tags may not exist in the backend so they might have\n    // to be created on-the-fly.\n    create(author = null, tags = [], pets = []) {\n        const tagmap = {}\n\n        // The value in the tag map determines whether or not a tag exists\n        // in the backend.\n        for (const tag of tags) {\n            tagmap[tag] = false\n        }\n\n        return apiRequest('GET', `/tags?filter[text][in]=${tags.join(',')}`)\n            .then((res) => res.json())\n            .then(({ data }) => {\n                const hydratedTags = []\n    \n                for (const resource of data) {\n                    const tag = new Tag(resource)\n                    tagmap[tag.getAttribute('text')] = true\n                    hydratedTags.push(tag)\n                }\n    \n                // Tags that were not returned from the query will still have\n                // their value set to false. Need to create them.\n                const newTags = tags.filter(tag => tagmap[tag] === false)\n    \n                // The API does not support creating entities in bulk.\n                // Need to make one request for each new tag.\n                if (newTags.length > 0) {\n                    return Promise\n                        .all(newTags.map(text => apiRequest('POST', '/tags', { type: 'tags', attributes: { text }})))\n                        .then(r => Promise.all(r.map(res => res.json()))) // Converting returned data to JSON returns a promise\n                        .then(r => r.map(({ data }) => new Tag(data)))\n                        .then(r => r.concat(hydratedTags))\n                } else {\n                    return hydratedTags\n                }\n            })\n            .then((tags) => {\n                const r = {}\n                let c = 0\n    \n                if (author !== null) {\n                    r['author'] = { data: author.toResourceIdentifier() }\n                    c++\n                }\n    \n                if (pets.length > 0) {\n                    r['pets'] = { data: pets.map((id) => ({ type: 'pets', id })) }\n                    c++\n                }\n\n                if (tags.length > 0) {\n                    r['tags'] = { data: tags.map(tag => tag.toResourceIdentifier()) }\n                    c++\n                }\n    \n                return c > 0 ? r : null\n            })\n            .then((relationships) => super.create(relationships))\n            .then((resource) => this.hydrate(resource))\n    }\n}","import { useContext, useEffect, useState } from 'react'\nimport { useHistory } from 'react-router'\n\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus, faSpinner } from '@fortawesome/free-solid-svg-icons'\n\nimport uploadImage from '../utils/uploadImage'\nimport Post from '../Models/Post'\nimport BackButton from '../components/BackButton'\nimport apiRequest from '../utils/apiRequest'\nimport SessionContext from '../context/SessionContext'\nimport useValidators from '../hooks/useValidators'\n\n\nfunction CreatePostPage() {\n    const [file, setFile] = useState(null)\n    const [pets, setPets] = useState([])\n    const [loading, setLoading] = useState(true)\n    const [session] = useContext(SessionContext)\n    const history = useHistory()\n\n    const minChars = (label, n) => (value) => Promise\n        .resolve(value.length < n ? `${label} must be ${n} or more characters long.` : null)\n\n    const maxChars = (label, n) => (value) => Promise\n        .resolve(value.length > n ? `${label} length cannot exceed ${n} characters.` : null)\n\n    const lettersOnly = (value) => Promise\n        .resolve(/^[A-Za-z ]*$/.test(value) ? null : 'Each tag must be a word separated by a space.')\n\n    const fields = useValidators({\n        title: [\n            minChars('Post title', 10),\n            maxChars('Post title', 35),\n        ],\n\n        text: [],\n\n        tags: [\n            lettersOnly,\n        ]\n    })\n\n    useEffect(() => {\n        apiRequest('GET', `/users/${session.user.id}/pets`)\n            .then((res) => res.json())\n            .then(({ data }) => {\n                setLoading(false)\n\n                setPets(data.map(({ id, attributes }) => ({\n                    id: id,\n                    image: attributes.image,\n                    name: attributes.name,\n                    isChecked: false\n                })))\n            })\n        \n        /*\n        setPets([\n            { id: '1', name: 'Bean', isChecked: true },\n            { id: '2', name: 'Charlie', isChecked: false },\n            { id: '3', name: 'Mr. Meow', isChecked: false },\n        ])\n\n        setLoading(false)\n        */\n    }, [])\n    \n    const createPost = () => {\n        if (file === null) {\n            window.alert('Posts need an image!')\n            return\n        }\n\n        const tagList = fields.get('tags').split(' ')\n            .map(t => t.trim().toLowerCase())\n            .filter(t => t.length > 0)\n\n        const petList = pets.map(({ id }) => ({ type: 'pets', id }))\n        \n        const makePostAndAddFields = (image) => (new Post())\n            .setAttribute('image', image)\n            .setAttribute('title', fields.get('title'))\n            .setAttribute('text', fields.get('text'))\n        \n        uploadImage(file)\n            .then((res) => res.json())\n            .then((res) => res.data)\n            .then(makePostAndAddFields)\n            .then((post) => post.create(session.user, tagList, petList))\n            .then((post) => history.replace(`/post/${post.id}`))\n    }\n\n    const handlePetChange = (index) => () => setPets(items => {\n        items[index].isChecked = !items[index].isChecked\n\n        return items\n    })\n\n    const handleSubmit = () => fields.getValidity()\n        .then((valid) => valid && createPost())\n\n    return (\n        <>\n            <h1 className=\"mb-4\"><BackButton />Create Post</h1>\n\n            <Form>\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Title</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            type=\"text\"\n                            isInvalid={fields.isInvalid('title')}\n                            placeholder=\"Enter post title\"\n                            onChange={fields.set('title')} />\n\n                        {fields.isInvalid('title') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('title')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Image</Form.Label>\n                    <Col sm={10}>\n                        <Form.File\n                            custom\n                            label={file ? file.name : 'Upload in image'}\n                            onChange={({ target }) => setFile(target.files.item(0))} />\n\n                        <Form.Control.Feedback type=\"invalid\">\n                            A post image is required.\n                        </Form.Control.Feedback>\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Caption</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            as=\"textarea\"\n                            isInvalid={fields.isInvalid('text')}\n                            placeholder=\"Enter post caption\"\n                            onChange={fields.set('text')} />\n\n                        {fields.isInvalid('text') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('text')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Tags</Form.Label>\n\n                    <Col sm={10}>\n                        <Form.Control\n                            type=\"text\"\n                            isInvalid={fields.isInvalid('tags')}\n                            placeholder=\"Enter tags separated by a space\"\n                            onChange={fields.set('tags')} />\n\n                        {fields.isInvalid('tags') && (\n                            <Form.Control.Feedback type=\"invalid\">\n                                {fields.getError('tags')}\n                            </Form.Control.Feedback>\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Form.Label column sm={2}>Pets in this post</Form.Label>\n\n                    <Col sm={10}>\n                        {loading && (\n                            <FontAwesomeIcon className=\"my-3\" icon={faSpinner} pulse />\n                        )}\n\n                        {!loading && pets.map((pet, i) => (\n                            <Form.Check\n                                key={i}\n                                type=\"checkbox\"\n                                label={pet.name}\n                                defaultChecked={pet.isChecked}\n                                onChange={handlePetChange(i)} />\n                        ))}\n\n                        {!loading && pets.length === 0 && (\n                            <Form.Control plaintext readOnly defaultValue=\"You have no pets!\" />\n                        )}\n                    </Col>\n                </Form.Group>\n\n                <Form.Group as={Row}>\n                    <Col sm={{ span: 10, offset: 2 }}>\n                        <Button variant=\"primary\" onClick={handleSubmit}>\n                            <FontAwesomeIcon icon={faPlus} className=\"mr-2\" />\n                            Create Post\n                        </Button>\n                    </Col>\n                </Form.Group>\n            </Form>\n        </>\n    )\n}\n\nexport default CreatePostPage","import { useState, useEffect, useContext } from 'react'\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useHistory,\n    useRouteMatch,\n    Redirect\n} from 'react-router-dom'\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Nav from 'react-bootstrap/Nav'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Navbar from 'react-bootstrap/Navbar'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faBone, faCog, faSignInAlt, faSignOutAlt, faUser, faUserCircle } from '@fortawesome/free-solid-svg-icons'\n\nimport apiRequest from './utils/apiRequest'\nimport formatDate from './utils/formatDate'\nimport SessionContext from './context/SessionContext'\nimport User from './Models/User'\n\nimport ExplorePage from './pages/dashboard/ExplorePage'\nimport PostPage from './pages/PostPage'\nimport SubscriptionsPage from './pages/dashboard/SubscriptionsPage'\nimport FavoritesPage from './pages/dashboard/FavoritesPage'\nimport SettingsPage from './pages/SettingsPage'\nimport SignInPage from './pages/SignInPage'\nimport SignUpPage from './pages/SignUpPage'\nimport CreatePostPage from './pages/CreatePostPage'\n\n// This part of the navigation bar shows if the user is not logged in.\nfunction Anonymous() {\n    const history = useHistory()\n\n    // Use history.push to programarically navigate to pages.\n    return (\n        <Nav className=\"ml-auto\">\n            <NavDropdown title={<FontAwesomeIcon icon={faUserCircle} size=\"2x\" />}>\n                <NavDropdown.Item onClick={() => history.push('/signin')}>\n                    <FontAwesomeIcon className=\"mr-2\" icon={faSignInAlt} /> Sign In\n                </NavDropdown.Item>\n\n                <NavDropdown.Item onClick={() => history.push('/signup')}>\n                    <FontAwesomeIcon className=\"mr-2\" icon={faUser} /> Sign Up\n                </NavDropdown.Item>\n            </NavDropdown>\n        </Nav>\n    )\n}\n\nfunction Authenticated() {\n    const [session, setSession] = useContext(SessionContext)\n    const history = useHistory()\n    const avatarStyle = {\n        borderRadius: '50%',\n        border: '1px solid #888',\n        width: '48px',\n        height: '48px'\n    }\n\n    const avatar = session.user.getAttribute('avatar') === null\n        ? <FontAwesomeIcon icon={faUserCircle} size=\"2x\" />\n        : <img style={avatarStyle} src={session.user.getAttribute('avatar')} />\n    \n    // Navigate to the explore page on logout\n    const logout = () => apiRequest('DELETE', '/session')\n        .then(() => setSession(null))\n        .then(() => history.push('/'))\n\n    return (\n        <Nav className=\"ml-auto\">\n            <NavDropdown className=\"text-center\" title={avatar}>\n                <NavDropdown.ItemText className=\"text-center\">\n                    {session.user.getAttribute('username')}\n                </NavDropdown.ItemText>\n\n                <NavDropdown.Divider />\n\n                <NavDropdown.Item as={Link} to=\"/settings\">\n                    <FontAwesomeIcon className=\"mr-2\" icon={faCog} />Settings\n                </NavDropdown.Item>\n\n                <NavDropdown.Item onClick={logout}>\n                    <FontAwesomeIcon className=\"mr-2\" icon={faSignOutAlt} />Sign Out\n                </NavDropdown.Item>\n            </NavDropdown>\n        </Nav>\n    )\n}\n\nfunction DashboardNav() {\n    const { url } = useRouteMatch()\n    const history = useHistory()\n    const prev = history.location.pathname.split('/').pop()\n    const pages = ['explore', 'subscriptions', 'favorites']\n    const [page, setPage] = useState(pages.includes(prev) ? prev : 'explore')\n\n    const goToPage = (p) => () => {\n        setPage(p)\n        history.replace(`${url}/${p}`)\n    }\n\n    return (\n        <ButtonGroup className=\"d-flex my-4\">\n            {pages.map((p, i) => (\n                <Button\n                    key={i}\n                    variant={p === page ? 'primary' : 'secondary'}\n                    onClick={goToPage(p)}>{`${p.charAt(0).toUpperCase()}${p.substr(1)}`}</Button>\n            ))}\n        </ButtonGroup>\n    )\n}\n\nfunction Dashboard() {\n    const { url } = useRouteMatch()\n\n    return (\n        <>\n            {/*session ? <DashboardNav /> : null*/}\n\n            <Switch>\n                <Route path={`${url}/explore`}>\n                    <ExplorePage />\n                </Route>\n\n                <Route path={`${url}/subscriptions`}>\n                    <SubscriptionsPage />\n                </Route>\n\n                <Route path={`${url}/favorites`}>\n                    <FavoritesPage />\n                </Route>\n\n                <Route path={`${url}/`}>\n                    <Redirect to={`${url}/explore`} />\n                </Route>\n            </Switch>\n        </>\n    )\n}\n\nfunction Main({ title }) {\n    //*\n    const mock = null\n    /*/\n    const mock = {\n        user: new User({\n            id: '1',\n            attributes: {\n                username: 'tgalinis2020',\n                firstName: 'Thomas',\n                lastName: 'Galinis',\n                email: 'tgalinis2020@fau.edu',\n                avatar: 'https://i.imgur.com/l3e1XuO.jpeg',\n            }\n        }),\n    \n        subscriptions: []\n    }\n    //*/\n\n    // Component state is managed using the useState hook.\n    // Use the setSession function to update the session; don't try to mutate\n    // the session variable directly!\n    const sessionState = useState(mock)\n    const [session, setSession] = sessionState\n\n    // useEffect hooks into this component's lifecycle. When it is loaded, it\n    // runs the provided callback function. If another callback is provided\n    // within the callback function, it will run it when the component is\n    // unloaded. In other words, inner callback = setup, outer callback =\n    // teardown.\n    //\n    // In this case, we're listening to the session observable. If it's not\n    // unsubscribed from when the component is not in use, a memory leak can\n    // occur.\n    useEffect(() => {\n        apiRequest('GET', '/session')\n            .then((res) => res.json())\n            .then((res) => res.data.uid)\n            .then((uid) => apiRequest('GET', `/users/${uid}`))\n            .then((res) => res.json())\n            .then((res) => ({ user: new User(res.data) }))\n            .then(setSession)\n            .catch((err) => console.log('Not logged in'))\n    }, [])\n\n    // Since this app is served in a directory within the server, the basename\n    // for all routes must be specified.\n    return (\n        <SessionContext.Provider value={sessionState}>\n            <Router>\n                <Navbar className=\"mb-4\" bg=\"dark\" variant=\"dark\" expand=\"lg\">\n                    <Container>\n                        <Navbar.Brand as={Link} to=\"/\">\n                            {title}<FontAwesomeIcon className=\"ml-2\" icon={faBone} />\n                        </Navbar.Brand>\n\n                        <Navbar.Toggle aria-controls=\"main-nav\" />\n                        \n                        <Navbar.Collapse id=\"main-nav\">\n                            {session ? <Authenticated /> : <Anonymous />}\n                        </Navbar.Collapse>\n                    </Container>\n                </Navbar>\n                \n                <Container>\n                    <Switch>\n                        <Route path=\"/dashboard\">\n                            <Dashboard />\n                        </Route>\n\n                        <Route path=\"/post/:id\">\n                            <PostPage />\n                        </Route>\n\n                        <Route path=\"/post\">\n                            <CreatePostPage />\n                        </Route>\n\n                        <Route path=\"/signin\">\n                            <SignInPage />\n                        </Route>\n\n                        <Route path=\"/signup\">\n                            <SignUpPage />\n                        </Route>\n\n                        <Route path=\"/settings\">\n                            <SettingsPage />\n                        </Route>\n\n                        <Route exact path=\"/\">\n                            <Redirect to=\"/dashboard\" />\n                        </Route>\n                    </Switch>\n                </Container>\n            </Router>\n        </SessionContext.Provider>\n    )\n}\n\nexport default Main\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Main from './Main'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Main title=\"The Pet Park\" />\n    </React.StrictMode>,\n    \n    document.getElementById('root')\n)\n"],"sourceRoot":""}