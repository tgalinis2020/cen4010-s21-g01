{"version":3,"sources":["utils/apiRequest.js","utils/convertDateTime.js","utils/formatDate.js","Session.jsx","Models/Base.js","Models/User.js","utils/uploadImage.js","RegistrationForm.jsx","Models/Tag.js","Models/Post.js","PostForm.jsx","utils/convertToJsonOrThrowError.js","LoginForm.jsx","Main.jsx","index.jsx"],"names":["apiRequest","method","target","data","url","init","headers","includes","JSON","stringify","fetch","convertDateTime","datetime","split","datePart","timePart","year","month","date","hours","minutes","seconds","Date","UTC","DAYS","MONTHS","formatDate","fromDB","getDay","getMonth","getDate","getFullYear","Session","user","onLogout","joinedOn","getAttribute","Media","width","height","className","src","alt","Body","ButtonGroup","Button","onClick","then","Base","obj","this","id","attributes","dirtyAttributes","relationships","attr","val","push","type","a","payload","console","log","res","json","relationship","objs","updateRelationship","map","toResourceIdentifier","User","password","hydrate","current","username","pet","updateToManyRelationship","post","uploadImage","file","body","FormData","append","name","RegistrationForm","onRegistered","onError","useState","setUsername","setPassword","firstName","setFirstName","lastName","setLastName","email","setEmail","avatar","setAvatar","Form","Group","Label","Control","placeholder","onChange","e","value","File","custom","label","files","item","variant","setAttribute","create","update","catch","Tag","Post","author","tags","pets","tagmap","tag","join","hydratedTags","resource","newTags","filter","length","Promise","all","text","r","concat","c","PostForm","onPostCreated","title","setTitle","setFile","setText","setTags","tagList","t","trim","toLowerCase","image","convertToJsonOrThrowError","status","LoginForm","onSuccess","uid","Main","users","setUsers","posts","setPosts","session","setSessionUser","getUsers","getPosts","included","items","related","createdAt","find","useEffect","err","Container","Table","index","code","window","alert","error","Row","Col","xs","sm","md","lg","Card","Img","Title","Text","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efbe2e24.chunk.js","sourcesContent":["function apiRequest(method, target, data = null) {\n    const url = `https://lamp.cse.fau.edu/~cen4010_s21_g01/api-v1.php${target}`\n    const init = {\n        method,\n        headers: {\n            'Content-Type': 'application/json',\n            'Accept':       'application/json',\n        }\n    }\n\n    if (['POST', 'PUT', 'PATCH'].includes(method)) {\n        init['body'] = JSON.stringify({ data })\n    }\n\n    return fetch(url, init)\n}\n\nexport default apiRequest\n","/**\n * In MySQL, the DATETIME data type returns dates using the \"YYYY-MM-DD HH:II:SS\"\n * format.\n * \n * Also worth noting that dates are stored relative to UTC.\n * \n * @param {string} datetimeString\n * @returns {Date} A Date object initialized using provided string.\n */\nfunction convertDateTime(datetime) {\n    const [datePart, timePart] = datetime.split(' ')\n    const [year, month, date] = datePart.split('-')\n    const [hours, minutes, seconds] = timePart.split(':')\n\n    // Note: months start at zero, so Jan = 0, Feb = 1, and so on.\n    return new Date(Date.UTC(year, month - 1, date, hours, minutes, seconds))\n}\n\nexport default convertDateTime\n","import convertDateTime from './convertDateTime'\n\nconst DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\nconst MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n                'Oct', 'Nov', 'Dec']\n\nfunction formatDate(fromDB) {\n    const date = convertDateTime(fromDB)\n\n    return `${DAYS[date.getDay()]}, ${MONTHS[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`\n}\n\nexport default formatDate","import Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Media from 'react-bootstrap/Media'\n\nimport apiRequest from './utils/apiRequest'\nimport formatDate from './utils/formatDate'\n\nfunction Session({ user, onLogout }) {\n    const logout = () => apiRequest('DELETE', '/session')\n        .then(onLogout)\n\n    const joinedOn = formatDate(user.getAttribute('createdAt'))\n\n    return (\n        <>\n            <Media>\n                <img\n                    width={64}\n                    height={64}\n                    className=\"mr-3\"\n                    src={user.getAttribute('avatar')}\n                    alt={user.getAttribute('username') + \"'s avatar\"}\n                />\n                <Media.Body>\n                    <h5>{user.getAttribute('firstName')} {user.getAttribute('lastName')} ({user.getAttribute('username')})</h5>\n\n                    <p>Joined on {joinedOn}</p>\n                </Media.Body>\n            </Media>\n\n            <ButtonGroup>\n                <Button onClick={logout}>Log out</Button>\n            </ButtonGroup>\n        </>\n    )\n}\n\nexport default Session","import apiRequest from '../utils/apiRequest'\n\nexport default class Base\n{\n    constructor(obj = {}) {\n        this.id = obj.id || null\n        this.attributes = obj.attributes || {}\n        this.dirtyAttributes = []\n        this.relationships = obj.relationships || {}\n    }\n\n    // Child classes must override this method!\n    get type() {\n        return 'generic'\n    }\n\n    hydrate(obj) {\n        this.id = obj.id || null\n        this.attributes = obj.attributes || {}\n        this.relationships = obj.relationships || {}\n\n        return this\n    }\n\n    setAttribute(attr, val) {\n        this.dirtyAttributes.push(attr)\n        this.attributes[attr] = val\n\n        return this\n    }\n\n    getAttribute(attr) {\n        return this.attributes[attr]\n    }\n\n    toResourceIdentifier() {\n        return {\n            type: this.type,\n            id:   this.id,\n        }\n    }\n\n    toResource() {\n        return {\n            type:       this.type,\n            id:         this.id,\n            attributes: this.attributes,\n        }\n    }\n\n    create(relationships = null) {\n        const attributes = {}\n\n        for (const a of this.dirtyAttributes) {\n            attributes[a] = this.attributes[a]\n        }\n\n        const payload = { type: this.type, attributes }\n\n        if (relationships !== null) {\n            payload['relationships'] = relationships\n        }\n\n        console.log(payload)\n\n        return apiRequest('POST', `/${this.type}`, payload)\n            .then(res => {\n                this.dirtyAttributes = []\n\n                return res.json()\n            })\n            .then(res => res.data)\n    }\n\n    update() {\n        const attributes = {}\n\n        for (const a of this.dirtyAttributes) {\n            attributes[a] = this.attributes[a]\n        }\n\n        const payload = { type: this.type, id: this.id, attributes }\n\n        return apiRequest('PATCH', `/${this.type}/${this.id}`, payload)\n            .then(() => {\n                this.dirtyAttributes = []\n\n                return this\n            })\n    }\n\n    delete() {\n        return apiRequest('DELETE', `/${this.type}/${this.id}`);\n    }\n\n    updateRelationship(method, relationship, payload) {\n        return apiRequest(\n            method,\n            `/${this.type}/${this.id}/relationships/${relationship}`,\n            payload\n        )\n    }\n\n    updateToManyRelationship(method, relationship, objs) {\n        return this.updateRelationship(\n            method,\n            relationship,\n            objs.map(obj => obj.toResourceIdentifier())\n        )\n    }\n\n    updateToOneRelationship(method, relationship, obj) {\n        return this.updateRelationship(\n            method,\n            relationship,\n            obj.toResourceIdentifier()\n        )\n    }\n}","import Base from './Base'\nimport apiRequest from '../utils/apiRequest'\n\nexport default class User extends Base\n{\n    get type() {\n        return 'users'\n    }\n\n    /**\n     * Creating users is a two-step process: a resource must be created and\n     * their password must be set immediately afterward.\n     * \n     * @param {string}   password\n     */\n    create(password) {\n        const type = this.type\n        const attributes = {}\n\n        for (const attr of this.dirtyAttributes) {\n            attributes[attr] = this.attributes[attr]\n        }\n\n        return apiRequest('POST', `/${type}`, { type, attributes })\n            .then(res => res.json())\n            .then(({ data }) => {\n                console.log(data)\n                this.hydrate(data)\n                return apiRequest('PUT', `/passwords/${data.id}`, password)\n            }).then(res => this)\n    }\n\n    updatePassword(current, password) {\n        return apiRequest('PATCH', `/passwords/${this.id}`, { current, password })\n    }\n\n    login(password) {\n        return apiRequest('POST', '/session', {\n            username: this.getAttribute('username'),\n            password\n        })\n    }\n\n    logout() {\n        return apiRequest('DELETE', '/session')\n    }\n\n    subscribeTo(pet) {\n        return this.updateToManyRelationship('POST', 'subscriptions', [pet])\n    }\n\n    unsubscribeFrom(pet) {\n        return this.updateToManyRelationship('DELETE', 'subscriptions', [pet])\n    }\n\n    addFavorite(post) {\n        return this.updateToManyRelationship('POST', 'favorites', [post])\n    }\n\n    removeFavorite(post) {\n        return this.updateToManyRelationship('DELETE', 'favorites', [post])\n    }\n\n    like(post) {\n        return this.updateToManyRelationship('POST', 'liked-posts', [post])\n    }\n\n    unlike(post) {\n        return this.updateToManyRelationship('DELETE', 'liked-posts', [post])\n    }\n}","function uploadImage(file) {\n    const url = `https://lamp.cse.fau.edu/~cen4010_s21_g01/api-v1.php/upload`\n    const body = new FormData()\n\n    body.append('data', file, file.name)\n\n    return fetch(url, { method: 'POST', body })\n}\n\nexport default uploadImage\n","import { useState } from 'react'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\n\nimport User from './Models/User'\n\nimport apiRequest from './utils/apiRequest'\nimport uploadImage from './utils/uploadImage'\n\nfunction RegistrationForm({ onRegistered, onError }) {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [firstName, setFirstName] = useState('')\n    const [lastName, setLastName] = useState('')\n    const [email, setEmail] = useState('')\n    const [avatar, setAvatar] = useState(null)\n\n    const user = new User()\n    \n    const createAccount = () => user\n        .setAttribute('firstName', firstName)\n        .setAttribute('lastName', lastName)\n        .setAttribute('email', email)\n        .setAttribute('username', username)\n        .create(password)\n        .then(() => apiRequest('POST', '/session', { username, password }))\n        .then(() => uploadImage(avatar))\n        .then(res => res.json())\n        .then(res => res.data)\n        .then(url => user.setAttribute('avatar', url))\n        .then(user => user.update())\n        .then(onRegistered)\n        .catch(onError)\n\n    return (\n        <Form>\n            <Form.Group>\n                <Form.Label>First Name</Form.Label>\n                <Form.Control type=\"text\"\n                              placeholder=\"Enter first name\"\n                              onChange={e => setFirstName(e.target.value)} />\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Label>Last Name</Form.Label>\n                <Form.Control type=\"text\"\n                              placeholder=\"Enter last name\"\n                              onChange={e => setLastName(e.target.value)} />\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Label>E-mail Address</Form.Label>\n                <Form.Control type=\"text\"\n                              placeholder=\"Enter e-mail address\"\n                              onChange={e => setEmail(e.target.value)} />\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Label>Username</Form.Label>\n                <Form.Control type=\"text\"\n                              placeholder=\"Enter username\"\n                              onChange={e => setUsername(e.target.value)} />\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Label>Password</Form.Label>\n                <Form.Control type=\"password\"\n                              placeholder=\"Enter password\"\n                              onChange={e => setPassword(e.target.value)} />\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Label>Avatar</Form.Label>\n                <Form.File\n                    custom\n                    label=\"Upload an image\"\n                    onChange={e => setAvatar(e.target.files.item(0))} />\n            </Form.Group>\n\n            <ButtonGroup>\n                <Button variant=\"primary\" onClick={createAccount}>Register</Button>\n            </ButtonGroup>\n        </Form>\n    )\n}\n\nexport default RegistrationForm","import Base from './Base'\n\nexport default class Tag extends Base\n{\n    get type() {\n        return 'tags'\n    }\n}","import apiRequest from '../utils/apiRequest'\nimport Base from './Base'\nimport Tag from './Tag'\n\nexport default class Post extends Base\n{\n    get type() {\n        return 'posts'\n    }\n\n    // Posts should immediately be associated with an author upon creation.\n    // Note that provided tags may not exist in the backend so they might have\n    // to be created on-the-fly.\n    create(author = null, tags = [], pets = []) {\n        const tagmap = {}\n\n        // The value in the tag map determines whether or not a tag exists\n        // in the backend.\n        for (const tag of tags) {\n            tagmap[tag] = false\n        }\n\n        return apiRequest('GET', `/tags?filter[text][in]=${tags.join(',')}`)\n            .then(res => res.json())\n            .then(res => res.data)\n            .then(data => {\n                const hydratedTags = []\n    \n                for (const resource of data) {\n                    const tag = new Tag(resource)\n                    tagmap[tag.getAttribute('text')] = true\n                    hydratedTags.push(tag)\n                }\n    \n                // Tags that were not returned from the query will still have\n                // their value set to false. Need to create them.\n                const newTags = tags.filter(tag => tagmap[tag] === false)\n    \n                // The API does not support creating entities in bulk.\n                // Need to make one request for each new tag.\n                if (newTags.length > 0) {\n                    return Promise\n                        .all(newTags.map(text => apiRequest('POST', '/tags', { type: 'tags', attributes: { text }})))\n                        .then(r => Promise.all(r.map(res => res.json()))) // Converting returned data to JSON returns a promise\n                        .then(r => r.map(({ data }) => new Tag(data)))\n                        .then(r => r.concat(hydratedTags))\n                } else {\n                    return hydratedTags\n                }\n            })\n            .then(tags => {\n                const r = {}\n                let c = 0\n    \n                if (author !== null) {\n                    r['author'] = { data: author.toResourceIdentifier() }\n                    c++\n                }\n    \n                if (pets.length > 0) {\n                    r['pets'] = { data: pets.map(pet => pet.toResourceIdentifier()) }\n                    c++\n                }\n    \n                console.log(tags)\n\n                if (tags.length > 0) {\n                    r['tags'] = { data: tags.map(tag => tag.toResourceIdentifier()) }\n                    c++\n                }\n    \n                return c > 0 ? r : null\n            })\n            .then(relationships => super.create(relationships))\n            .then(resource => this.hydrate(resource))\n    }\n}","import { useState } from 'react'\n\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\n\nimport Post from './Models/Post'\nimport uploadImage from './utils/uploadImage'\n\n\nfunction PostForm({ user, onPostCreated }) {\n    const [title, setTitle] = useState('')\n    const [file, setFile] = useState(null)\n    const [text, setText] = useState('')\n    const [tags, setTags] = useState('')\n    \n    const createPost = () => {\n        if (file === null) {\n            return\n        }\n\n        const tagList = tags\n            .split(',')\n            .map(t => t.trim().toLowerCase())\n        \n        const makePostAndAddFields = image => (new Post())\n            .setAttribute('image', image)\n            .setAttribute('title', title)\n            .setAttribute('text', text)\n        \n        uploadImage(file)\n            .then(res => res.json())\n            .then(res => res.data)\n            .then(makePostAndAddFields)\n            .then(post => post.create(user, tagList, []))\n            .then(onPostCreated)\n    }\n\n    return (\n        <Form>\n            <Form.Group>\n                <Form.Label>Title</Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter post title\"\n                    onChange={({ target }) => setTitle(target.value)} />\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Label>Image</Form.Label>\n                <Form.File\n                    custom\n                    label=\"Upload an image\"\n                    onChange={({ target }) => setFile(target.files.item(0))} />\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Label>Text</Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter post text\"\n                    onChange={({ target }) => setText(target.value)} />\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Label>Tags</Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter commea-separated tags\"\n                    onChange={({ target })=> setTags(target.value)} />\n            </Form.Group>\n\n            <ButtonGroup>\n                <Button onClick={createPost}>Create</Button>\n            </ButtonGroup>\n        </Form>\n    )\n}\n\nexport default PostForm","/**\n * If the response's status code does not match the one provided, the inner\n * function will throw an error.\n * \n * @param {number} status \n * @returns \n */\n function convertToJsonOrThrowError(status) {\n    return function (res) {\n        if (res.status !== status) {\n            throw res.status\n        }\n\n        return res.json()\n    }\n}\n\nexport default convertToJsonOrThrowError","import { useState } from 'react'\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\n\nimport User from './Models/User'\n\nimport apiRequest from './utils/apiRequest'\nimport convertToJsonOrThrowError from './utils/convertToJsonOrThrowError'\n\nfunction LoginForm({ onSuccess, onError }) {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n\n    const login = () => apiRequest('POST', '/session', { username, password })\n        .then(convertToJsonOrThrowError(201))\n        .then(res => res.data)\n        .then(({ uid }) => apiRequest('GET', `/users/${uid}`))\n        .then(res => res.json())\n        .then(res => new User(res.data))\n        .then(onSuccess)\n        .catch(onError)\n\n    return (\n        <Form>\n            <Form.Group>\n                <Form.Label>Username</Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter username\"\n                    onChange={e => setUsername(e.target.value)} />\n            </Form.Group>\n\n            <Form.Group>\n                <Form.Label>Password</Form.Label>\n                <Form.Control\n                    type=\"password\"\n                    placeholder=\"Enter password\"\n                    onChange={e => setPassword(e.target.value)} />\n            </Form.Group>\n\n            <ButtonGroup>\n                <Button variant=\"primary\" onClick={login}>Log In</Button>\n            </ButtonGroup>\n        </Form>\n    )\n}\n\nexport default LoginForm","import { useState, useEffect } from 'react'\n\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport Table from 'react-bootstrap/Table'\nimport Button from 'react-bootstrap/Button'\nimport ButtonGroup from 'react-bootstrap/esm/ButtonGroup'\n\nimport Session from './Session'\nimport RegistrationForm from './RegistrationForm'\nimport PostForm from './PostForm'\nimport LoginForm from './LoginForm'\n\nimport User from './Models/User'\n\nimport apiRequest from './utils/apiRequest'\nimport formatDate from './utils/formatDate'\n\nfunction Main() {\n    const [users, setUsers] = useState([])\n    const [posts, setPosts] = useState([])\n    const [session, setSessionUser] = useState(null)\n\n    const handleLoginError = code => window.alert(`Can't log in! (error: ${code})`)\n\n    const getUsers = () => apiRequest('GET', '/users')\n        .then(res => res.json())\n        .then(res => res.data)\n        .then(users => users.map(user => new User(user)))\n        .then(setUsers)\n\n    const getPosts = () => apiRequest('GET', '/posts?include=author,tags&fields[users]=username')\n        .then(res => res.json())\n        .then(({ data, included }) => {\n            const items = []\n\n            for (const post of data) {\n                const { attributes, relationships } = post\n                \n                // TODO:    Pets and likes should be here as well but they are\n                //          not represented in the front-end yet.\n                // Note that some relationships might not be available, such as\n                // tags.\n                const related = {\n                    author: relationships.author.data.id,\n                    tags: 'tags' in relationships ? relationships.tags.data.map(obj => obj.id) : [],\n                }\n\n                items.push({\n                    image: attributes.image,\n                    title: attributes.title,\n                    text: attributes.text,\n                    createdAt: formatDate(attributes.createdAt),\n\n                    // Posts MUST have an author so it should be safe to assume\n                    // that the find method returns a resource object of\n                    // type \"users\".\n                    author: included\n                        .find(obj => obj.type === 'users' && obj.id === related.author)\n                        .attributes\n                        .username,\n\n                    tags: included\n                        .filter(obj => obj.type === 'tags' && related.tags.includes(obj.id))\n                        .map(tag => `#${tag.attributes.text}`),\n                })\n            }\n\n            return items\n        })\n        .then(setPosts)\n    \n    // Load users and posts, check session status when component loads.\n    // The useEffect React hook follows the lifecyle of this component.\n    // The arrow function passed inside runs when the component is completely\n    // loaded. Optionally, it can return a cleanup function that runs\n    // when the component is destroyed.\n    //\n    // The second argument of useEffect is the dependencies, i.e. anything\n    // declared above in this component that is used in the hook.\n    useEffect(() => {\n        getUsers()\n        getPosts()\n        apiRequest('GET', '/session')\n            .then(res => res.json())\n            .then(res => res.data.uid)\n            .then(uid => apiRequest('GET', `/users/${uid}`)\n            .then(res => res.json())\n            .then(res => new User(res.data)))\n            .then(setSessionUser)\n            .catch(err => console.log('Not logged in'))\n    }, [setSessionUser])\n\n    return (\n        <Container>\n            <h1>Users and Authentication</h1>\n\n            <Button className=\"mb-4\" onClick={() => getUsers()}>Refresh</Button>\n\n            <Table>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Username</th>\n                        <th>E-mail Address</th>\n                        <th>First Name</th>\n                        <th>Last Name</th>\n                        <th>Joined On</th>\n                    </tr>\n                </thead>\n\n                <tbody>\n                    {users.map((user, index) => (\n                        <tr key={index}>\n                            <td>{user.id}</td>\n                            <td>{user.getAttribute('username')}</td>\n                            <td>{user.getAttribute('email')}</td>\n                            <td>{user.getAttribute('firstName')}</td>\n                            <td>{user.getAttribute('lastName')}</td>\n                            <td>{user.getAttribute('createdAt')}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </Table>\n\n            {session ?\n                <Session user={session} onLogout={() => setSessionUser(null)} /> :\n                <>\n                    <LoginForm\n                        onSuccess={setSessionUser}\n                        onError={handleLoginError} />\n                    \n                    <p>Don't have an account? Create one!</p>\n\n                    <RegistrationForm\n                        onRegistered={setSessionUser}\n                        onError={console.error} />\n                </>\n            }\n\n            <hr />\n\n            <h1>Posts</h1>\n\n            <ButtonGroup>\n                <Button onClick={() => getPosts()}>Refresh</Button>\n            </ButtonGroup>\n\n            <Row>\n                {posts.map(post => (\n                    <Col xs={1} sm={2} md={3} lg={4}>\n                        <Card>\n                            <Card.Img src={post.image} />\n                            <Card.Body>\n                                <Card.Title>{post.title}</Card.Title>\n                                <Card.Text>\n                                    <small className=\"text-muted\">Posted by {post.author} on {post.createdAt}</small>\n                                    <p>{post.text}</p>\n                                    <p className=\"text-muted\">Tags: {post.tags.join(', ')}</p>\n                                </Card.Text>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                ))}\n            </Row>\n\n            {session && <>\n                <h3>Create Post</h3>\n\n                <PostForm user={session} onPostCreated={() => getPosts()} />\n            </>}\n        </Container>\n    )\n}\n\nexport default Main","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport Main from './Main'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Main />\n    </React.StrictMode>,\n    \n    document.getElementById('root')\n)\n"],"sourceRoot":""}